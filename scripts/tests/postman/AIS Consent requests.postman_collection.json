{
	"info": {
		"_postman_id": "a9cb3c41-a040-4ff5-985b-a942430cdd1a",
		"name": "AIS Consent requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Available accounts",
			"item": [
				{
					"name": "Consent available accounts EMBEDDED 0 SCA methods",
					"item": [
						{
							"name": "1. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed2e88a3-5a34-4de1-b40e-b6d6970d1a1a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d13cf9d-7432-41ab-a2d5-7c9b2e9aa85c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb2785fa-7f9a-4262-9e07-cbf2dcd4a56f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a2fcec7-2bf9-4069-86d8-e3da60b2a8b2",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eefd7819-2d60-4120-97ab-b2f761c8d9ae",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "550b6419-018b-4baf-8dc8-ab834777e7bd",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c9d9ca8-ae75-4d6e-8085-6b3313a90371",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f394e8f-9e52-4d47-aa10-def959b3a00d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "7. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06839897-32e8-4532-9adf-b4044c85d8e9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA status is present\", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"});",
											"",
											"pm.test(\"SCA status is failed\", () => {",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('failed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "8. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ce373a0-df99-4a57-abfd-bda3dae2d0dd",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is present\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});",
											"",
											"pm.test(\"Consent status is rejected\", () => {",
											"    const consentStatus = jsonData.consentStatus;",
											"    pm.expect(consentStatus).to.eql('rejected');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "9. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "524b327c-105c-4277-9872-eae0c34ab528",
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent available accounts EMBEDDED 1 SCA method",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9aa1c329-e06c-4b22-b511-20635312057c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6798a8f0-25f8-4390-bce1-f1e56dae7a97",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70670528-92e4-46be-af55-2ade9ba3d511",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92131eeb-bd36-42c5-a176-94259ff599f5",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "409a88d3-19f1-41f3-8667-4c22c84bfab4",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69a6162b-ee78-47f5-bc9e-957f29eb0382",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74d0a873-d907-4d07-91a9-66a239a35ed1",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "072944a6-af6a-4e91-b9d7-a44e5fd6c4ab",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "7. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "042444d5-1c03-4694-8f95-ed4e06d23e32",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "8. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eabf869e-e5b3-4b11-895d-96ee14eb93f0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "9. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d99c1fb3-6116-4636-9099-7943fabdbc8a",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76417bf6-b327-40f0-9c4b-b55cb6e03964",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "026aba67-ba74-4faf-bbe5-3d6decf711ef",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent available accounts REDIRECT->OAUTH 1 SCA method",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd612c82-8c85-4fd2-a21b-65e61c8a3d45",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ccbd4d-90e3-4fff-a399-9e7a548f8f5c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88ce48af-459a-41b3-80f9-be6fd5f96de4",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "322057ea-b314-4a4a-b800-0158be7f5abd",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79d561df-9e5a-4cf2-9ba9-011bb3063efb",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaOAuth');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f614db4-3a40-4dd8-acd9-36fa0235e13c",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "186bafe9-871f-4821-8535-354cd08d4fc6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4df1e0a5-183d-4970-882a-7b1b5c689121",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data in consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2ac9edc-ab88-4971-a696-40d6aafe2b0d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create authorisation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15d67e06-1613-466d-845f-2c975bd8e354",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData.redirectUri.split(\"=\");",
											"const authorisationCode = parts[1];",
											"pm.globals.set(\"authorisation_code\", authorisationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/authorise?login={{psu_id_single}}&pin={{psu_id_password}}&redirect_uri=random",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"authorise"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "redirect_uri",
											"value": "random"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Create access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b40bc0d7-3726-4a72-aca1-f6266492e027",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"bearer\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/token?grant_type=AUTHORISATION_CODE&code={{authorisation_code}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "AUTHORISATION_CODE"
										},
										{
											"key": "code",
											"value": "{{authorisation_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c76bb87-edf5-4de0-9a13-903321933fda",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [],\n    \t\"balances\": [],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\",\n    \t\"transactions\": []\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc04aaac-950a-4b5d-aafa-09c8970d2f6c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd7e34b0-1d3e-4ce3-85e3-b62046c9aa5a",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "596de016-0d01-4509-bed6-e2f46b142222",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ee00215-649c-4bc1-acbe-2d476f59ef90",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fdf8eab-3f96-4cd3-9934-10537efcc04a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "14. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61c396ac-bd8c-45d8-a9fd-3c866c8370cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "15. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1662a56a-fb45-43bd-94b1-76e3283a2cf9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "16. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dc2bf95-08e9-4122-8438-f89f3f3a52e6",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b47763d-0335-4199-a256-65f8f99bc753",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a2b2988-d4c3-4f22-8483-d0f04c373f80",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent available accounts EMBEDDED start authorisation with password",
					"item": [
						{
							"name": "1. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f221c780-9585-4e33-89e5-bad25e27caa1",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67dd7e7b-fe2c-4352-9b1a-78450a18a280",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39ddc52-c89b-4d37-b27f-12194175e612",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2c8ebca-4855-4b6a-846f-d93b95b69b43",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3eff88f-8c81-4bfc-a337-880bfb507410",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('scaMethodSelected');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03b94205-2b75-4975-a3c5-31a4c799bee2",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Start the authorisation process for a consent with wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be85b74e-d734-4899-911d-227eaaf18af0",
										"exec": [
											"pm.test('Status code is 401', () => {",
											"   pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6eea0764-553a-4580-ab9e-59b02ee0bb23",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong password\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "6. Start the authorisation process for a consent without PSU-ID header and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3143088-9422-4921-bf3a-36aadf361de5",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('scaMethodSelected');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78ea65e9-3698-465e-ac73-e62c9fc09e23",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "7. Start the authorisation process for a consent with wrong password and without PSU-ID header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2514dce-029c-4c0e-8803-2731ccce2ee3",
										"exec": [
											"pm.test('Status code is 401', () => {",
											"   pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "792921b8-2332-41d1-86b7-b906c5b72e2e",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong password\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent available accounts EMBEDDED start authorisation with password",
					"item": [
						{
							"name": "1. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "563f1e49-e00c-4383-a516-f6529f83cec6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dafdc777-ad13-4016-a6f4-89756169470a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "587bd219-ec78-4283-9d19-38a0499c5e7c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ba0f85-b94e-46c5-80f2-b12bdd1eb7a1",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4bda0de-3b04-42d1-a504-905e641b36c1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('scaMethodSelected');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9233f25-2432-43be-b2fc-1a15d1549677",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21085415-c476-4d8d-a2f1-7a03bcdd5ea7",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9fc2fb5f-9b4e-47b5-b6a6-67d9caa14dd5",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Start the authorisation process for a consent with wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9947c8a-4572-4b94-b657-77f081ac624d",
										"exec": [
											"pm.test('Status code is 401', () => {",
											"   pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f482248-8498-4e2f-b0ad-dde127f922e7",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong password\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "7. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b3cfaaa-0693-49de-8eba-aa65d6c81348",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7dd3d162-1fb3-46d8-bcf2-ee4f0fe89f8d",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Start the authorisation process for a consent without PSU-ID header and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae46a25e-f795-4a18-a932-0d0d58126add",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('scaMethodSelected');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd8cf4d5-47b4-4eb8-b518-0428ab67b3a7",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "9. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35b69593-979b-49f5-920e-d4f0bc71aa92",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a075558-a290-4db8-ac2e-0fed79e86db5",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Start the authorisation process for a consent with wrong password and without PSU-ID header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d60055d-4da6-4df7-aa6b-1f72aa545ad9",
										"exec": [
											"pm.test('Status code is 401', () => {",
											"   pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e863349b-4560-45b0-a296-f2bfa22b9a31",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong password\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent available accounts EMBEDDED multiple SCA methods",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecfed6e2-f174-4e8b-965b-4d82e17f2b67",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "167b9080-9785-43b8-9815-6dabe36229a1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "766f29dd-f8ad-4ad1-a0b9-296420fed65d",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e3eb315-1f8d-4a77-a7ec-8cc6de3d9b7d",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb7927ca-142b-4b99-a965-18e0ca8966d6",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05f2f5c3-1664-4d87-aea7-d0310fb7c085",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is psuAuthenticated', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
											"});",
											"",
											"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
											"});",
											"",
											"pm.test(\"scaMethods exist\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"    const scaMethods = jsonData.scaMethods;",
											"    ",
											"    pm.expect(scaMethods.length).to.be.above(1);",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"    ",
											"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consent choose SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbb6194f-7813-4c6f-adeb-7fb47b5e2b36",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ce7a9f-5a48-45ba-8013-0250acf470e7",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e407c60-082a-40e6-9e43-5fe4c9fdbdef",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fb93580-c436-469f-a923-c311f02edbfa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "9. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da51e588-7f65-43ef-9f1f-5a35562b6ff6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "10. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96bfe85f-d662-4c24-a901-f7ecc18e0dad",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5107bca-3456-4685-9b74-6b3167953ac0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ae46df4-f4b9-451d-8d07-3d12cba1388d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Dedicated",
			"item": [
				{
					"name": "Consent dedicated EMBEDDED 1 SCA method",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7bf9278-b5cb-4b01-bd93-c7663f9dbc26",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc3d6ae0-96d5-48b4-b0a5-0474dae40ed1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30d8cc53-61fc-4891-a052-15244e000c72",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cef9800f-71d0-45c4-8809-d7e4a7a9664a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ae8fa4-6e5c-4b32-9a95-f048f0b9fb1a",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "324a7297-9d00-418c-aa9c-40c0c54d7f4c",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ba4a9be-8a49-4d84-9797-7e161b585a6d",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1b2f726-7780-4803-9c8e-aec740e42767",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "7. Read the SCA status of the consent authorisation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf7e5e7c-c9d6-43ed-b8d4-92525e1ee395",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "8. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a28f102-4c4b-431d-8f0c-81ceab150e2c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "9. Delete Consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "283ff132-b668-4c14-9a66-942aa1245dbf",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f582c2c-c795-4edf-be55-dd5ed2f96f24",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6dd56f03-0fd2-4ba5-a3bd-8e2a870c97b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED multiple SCA methods",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13943bd2-cb14-4fd9-bd8e-fed503d75d4e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32990fe4-b083-4323-b441-78644711bb31",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9708ff74-c17f-4ab0-bd43-992c2db40797",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c660d6d-3bcd-4ca6-9b21-f47501cd475e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b3b1f7a-f8c0-44c9-af98-f2c12391e77e",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c689f45-66b5-4122-bae8-2c398da50d9a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is psuAuthenticated', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
											"});",
											"",
											"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
											"});",
											"",
											"pm.test(\"scaMethods exist\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"    const scaMethods = jsonData.scaMethods;",
											"    ",
											"    pm.expect(scaMethods.length).to.be.above(1);",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"    ",
											"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consent choose SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6a315e-1599-4fb7-93ff-82d91804d4f7",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93b12c4a-39e1-4647-b1ae-487096a3e05a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd583df8-17c3-40fb-a9a0-3c364117d17c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f86c4733-655c-46cc-973d-b7b9c0ec9b41",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA status is present\", () => {",
											"  pm.expect(jsonData).to.have.property('scaStatus');",
											"});",
											"",
											"pm.test(\"SCA status is finalised\", () => {",
											"  const scaStatus = jsonData.scaStatus;",
											"  pm.expect(scaStatus).to.eql('finalised');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "9. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "750795cc-fe42-45fa-9e18-d2997476d68c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is present\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});",
											"",
											"pm.test(\"Consent status is finalised\", () => {",
											"  const consentStatus = jsonData.consentStatus;",
											"  pm.expect(consentStatus).to.eql('valid');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "10. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8123b68a-4d09-4469-af69-7db68b5cd297",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da3f34bf-5587-4bcd-9ad1-58b20a3537f1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "197b17ea-f4c4-4ed7-958a-6711dfa9f510",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated explicit EMBEDDED multiple SCA no PSU in Update",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91799dbf-28f8-48da-8f74-ceb0c5501343",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable signing basket support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70ac673-dd2a-4240-8305-373aca4aaef3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n        \n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b707babd-ce87-4d49-92f9-a7efc6aef5b9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"startAuthorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var startAuthorisation = _links.startAuthorisation.href;",
											"",
											"    if (startAuthorisation === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "274ec4b0-ea0d-4667-9931-02c0655123f5",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "Tpp-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multiple}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cc8fa60-fbbe-47b0-8ee0-7de6860bf27b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4526627c-4540-4af7-ad2e-d9e59240fdc2",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7282ff2-09f2-4ddf-b690-2fb16b597f0c",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is psuAuthenticated', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
											"});",
											"",
											"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
											"});",
											"",
											"pm.test(\"scaMethods exist\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"    const scaMethods = jsonData.scaMethods;",
											"    ",
											"    pm.expect(scaMethods.length).to.be.above(1);",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
											"    ",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
											"    ",
											"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consent choose SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfc887b6-c076-4909-a6a0-6041ee42ec74",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "737e8c88-e56c-4b86-a59d-cb164fc7d96f",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f65cc2cb-77b9-4547-96cb-5dd24a4ef006",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc8ba52c-f8e3-4a17-b461-3145a77bda16",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA status is present\", () => {",
											"  pm.expect(jsonData).to.have.property('scaStatus');",
											"});",
											"",
											"pm.test(\"SCA status is finalised\", () => {",
											"  const scaStatus = jsonData.scaStatus;",
											"  pm.expect(scaStatus).to.eql('finalised');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "10. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "923b387f-b531-4c69-9c24-7c5b31874849",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is present\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});",
											"",
											"pm.test(\"Consent status is finalised\", () => {",
											"  const consentStatus = jsonData.consentStatus;",
											"  pm.expect(consentStatus).to.eql('valid');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "11. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f174b45e-8b34-4a59-ac71-fa852b2549a0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d114e90-da0b-4c77-890c-ab6df7beec76",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "659ce92f-2e5b-4ef2-834c-e7e699bb1756",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT->OAUTH 1 SCA method",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f44a1ee-6427-44b9-a6e9-17c6a098d794",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b8e93bd-2900-48f8-9823-dd549e6e3bc5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f99d4ef6-8cfa-45d8-aee4-6e5f05c0fc51",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.scaOAuth.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8985f8-6d49-43e8-8b92-f15489d95c2f",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c20468b5-d796-4aab-b208-aa978081394b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaOAuth');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c338f46-2831-4a38-95ce-1599f1734e1a",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51554d91-8091-4dd2-bbdf-b39094c40030",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bacef32e-3d28-4062-ab89-9ebbedc60290",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create authorisation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daf417b8-87a1-480e-a01d-6dbc9b277c1b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData.redirectUri.split(\"=\");",
											"const authorisationCode = parts[1];",
											"pm.globals.set(\"authorisation_code\", authorisationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/authorise?login={{psu_id_single}}&pin={{psu_id_password}}&redirect_uri=random",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"authorise"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "redirect_uri",
											"value": "random"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Create access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91a83464-b53d-4b56-ba59-f42af2cdf099",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"bearer\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/token?grant_type=AUTHORISATION_CODE&code={{authorisation_code}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "AUTHORISATION_CODE"
										},
										{
											"key": "code",
											"value": "{{authorisation_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8133d97-c36d-4458-ae87-c9e79dd1a902",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [],\n    \t\"balances\": [],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\",\n    \t\"transactions\": []\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2843c08-206c-43a8-856f-1e7ebc9b81c0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3b9e0fa-9b2e-4c9e-9dd5-67dbed34bc23",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcd6ac5a-92a2-4412-a88e-ba2d9db8c63f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b63801b-8bfd-4304-952b-a4241c8bea33",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f06eebe3-6271-481a-8a4f-c3ccd6d6f68c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "14. Read the SCA status of the consent authorisation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96402b6f-4072-421b-9a8b-df5bd0ddf013",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "15. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5498e8ac-f946-41e8-b37b-073cefbc2cea",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "16. Delete Consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "436aa090-7ca5-459c-90b2-8b861c1a2a96",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "556ff0b9-328a-4a5f-bbb0-effb01067a06",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86277cfb-dc88-449a-b69b-b182795c2085",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED 1 SCA method without PSU ID",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8123e0ac-4fc0-4ee2-8e98-1cc0b7e9ce54",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "622e619f-b8a1-4b53-b4b8-6667a2201544",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aafb93c2-5717-4b4d-9345-93e500aa024f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var startAuthorisation = _links.startAuthorisation.href;",
											"",
											"    if (startAuthorisation === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "998ef8c1-7621-4928-b6ab-d0b6f946594f",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c865e964-5f12-4ab6-a085-a195c18c3815",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9506e913-261d-4fd7-87d1-0f60cfba223a",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7ec5a9e-ff78-444f-87bb-95c8be7e21bb",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is psuIdentified', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.test(\"Links exist\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94aa394b-978e-4576-ba70-eb860f20778b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "819ebd18-714d-43e3-a305-aa94bf67a875",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT - confirm consent and read accounts/balances",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7802e5a-9ed5-4a1b-8d47-50ab88daaf5c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a4833bb-4692-4fb3-9711-54da0186f7f7",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba83a93a-7b6a-4c60-853d-224434ce2469",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ef7f8df-1de6-4bc7-aefe-b244d7c17947",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56d67d55-c76d-4ec6-a263-a24900721b6c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9319bdfb-7739-4389-8483-ad7d3b82774f",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data in consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78ce9c49-5634-4cf2-9a84-a0da9b039c06",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01ae2854-ce3c-4c96-989e-1211055f5604",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_none}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20211f19-3a73-4ec8-a963-0ad65898f071",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cb40900-7bea-4f79-a6aa-663efbfb85ce",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "633e2130-ddb9-4ab6-8ae1-196b28db55d7",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db195a6c-3140-4494-9c59-c9538e7f0323",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Get AIS consent object from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91c01ee3-2690-4af7-995c-341bc5365218",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Consent status is VALID\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d643105c-f9cb-45d7-8e17-14ce37aa059c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8fa7f50-4922-479f-afe0-48e9da9f0f89",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        pm.globals.set(\"account_id\", firstAccount.resourceId);",
											"",
											"",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"        }",
											"        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2da5a524-e5ed-476a-ac28-5351f9b5c36a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bae66347-d1fe-41a7-9998-526dcd623afe",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "14. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00d443dd-2700-44df-98e0-f5c882eb0ca2",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
											"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Links exist\", function () {",
											"    pm.expect(jsonData).to.have.property('transactions');",
											"    pm.expect(jsonData.transactions).to.have.property('_links');",
											"",
											"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
											"    pm.expect(jsonData.transactions._links).to.have.property('account');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ddc76638-aa2a-4024-893e-3ff7845de32e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-12-31&withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-12-31"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						},
						{
							"name": "15. Download transactions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{dowload_link}}",
									"host": [
										"{{dowload_link}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT->OAUTH - confirm consent and read accounts/balances",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d35dfb15-1f86-4d1c-aefc-4aea44756e74",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccc6cf50-aade-4332-909d-b710a360bdef",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a550961c-2ac2-48f7-8866-35e2f4132895",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1c38cd3-dc49-4088-9151-3340fe3da845",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaOAuthLink = jsonData._links.scaOAuth.href;",
											"",
											"if (scaOAuthLink !== undefined) {",
											"    var a = scaOAuthLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01f17c88-4c00-4229-b08d-7143886666ba",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29d4de87-77ed-4d75-84c8-ff8856e04044",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data in consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeddc5d1-3ccb-4a46-a8c1-9cea8b69543d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc8f261a-6b61-4d10-a4ac-e6bf671d8b33",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_none}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ba74a81-e902-47f8-80ae-20151be68aaf",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd2d8136-f0d3-47db-b8ac-7da1591330dc",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ff3eb4e-6703-47bf-ae75-5b75d24bbce6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "636da5fc-8812-41e3-864b-d3d5457765f8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Get AIS consent object from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d318b5c1-4d8b-4a50-9ec4-a4578af23cc3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Consent status is VALID\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "806ff9db-2b32-4af1-94d2-b4dfba7732d5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a11b69-4be9-4e06-a033-f40984330f25",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        pm.globals.set(\"account_id\", firstAccount.resourceId);",
											"",
											"",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"        }",
											"        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2479539-7a18-432a-8a10-97131ef96ce3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d2abc0e-41dd-4cf4-ae68-a5f9b36c578b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "14. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5d25c22-4fda-47d1-9fe0-8aea6d325ec5",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
											"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Links exist\", function () {",
											"    pm.expect(jsonData).to.have.property('transactions');",
											"    pm.expect(jsonData.transactions).to.have.property('_links');",
											"",
											"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
											"    pm.expect(jsonData.transactions._links).to.have.property('account');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3305f52-df3f-4faf-9c3e-cc8d53cce700",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-12-31&withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-12-31"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						},
						{
							"name": "15. Download transactions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{dowload_link}}",
									"host": [
										"{{dowload_link}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT - update authorisation status with body",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cb2cf9f-a1bd-4d10-976f-46766a21b782",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bf12483-f55b-44ed-89b7-62ef02b5aed5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9238da46-4d31-4d3e-a612-5546eb76c817",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "767e83fe-8c57-4f87-be34-8e2537af3cb6",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a7eb8a4-245e-40e0-8bd7-f511648fdb44",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4bd76d96-7b48-425b-aff3-18a610578c4c",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data in consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9eb4f13-5deb-4ad4-8bfd-a42240bfa119",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e666a056-3b92-491d-9e4c-62666b5e2b3d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_none}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab19b08a-202a-4e21-9b5f-ae111e9bfa12",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "786a22ea-fe2d-4eaa-81ab-7ca287b512f2",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e75ec98e-b54a-4350-9181-3837f7183479",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07f5cb24-4761-47b6-bbc5-de0871a585d8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Get AIS consent object from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23bc8898-3889-4b34-88c5-106547b17529",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Consent status is VALID\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED 1 SCA method - read accounts/balances/transactions",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba6a0928-416d-4d6b-8a1e-c560f6ff2b0c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceb13ac8-59df-4e0e-8415-72528a6968fe",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c83f6cc-0a11-4f49-b1ae-987f2bae6bab",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530f0f07-bcba-4b60-aa32-146cd1baae18",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f67cdd5-b553-4821-bf27-2888599ec86e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9d44b3e-2479-44d4-93a4-95923da8c5c3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46754685-8708-411f-a134-fbab5d9d60ae",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a311cce0-253c-4b20-949f-8464022f22a1",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f5d219-02b6-4902-97ee-f400715b5cc4",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"//",
											"// This test fails and is blocked by the https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/987 issue.",
											"//",
											"",
											"        ",
											"//        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"//           pm.expect(firstAccount).to.have.property('balances');",
											"//        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a69d2a97-efba-4103-9951-9088b3c5ea3a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "8. Read Account Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b238b186-cbba-4d24-a79b-8b110fb2f4fb",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.account).to.have.property('_links');",
											"        pm.expect(jsonData.account._links).to.have.property('balances');",
											"        pm.expect(jsonData.account._links).to.have.property('transactions');",
											"        pm.expect(jsonData.account).to.have.property('resourceId');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData.account).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
							},
							"response": []
						},
						{
							"name": "9. Read Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8e846a0-16f5-4ac8-a7bc-ed74a0b5e066",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "10. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "054bf476-d5b3-4837-8efd-60e583367589",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"transaction_id\", jsonData.transactions.booked[0].transactionId);",
											"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Links exist\", function () {",
											"    pm.expect(jsonData).to.have.property('transactions');",
											"    pm.expect(jsonData.transactions).to.have.property('_links');",
											"",
											"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
											"    pm.expect(jsonData.transactions._links).to.have.property('account');",
											"    pm.expect(jsonData._links).to.have.property('download');",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a308f6a-c322-4ac1-92d0-8fc9dfe71552",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth(); ",
											"var yyyy_end = end.getFullYear() + 1;",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000*150));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth(); ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&withBalance={{with_balance}}&dateFrom=2018-01-01&dateTo=2020-09-30",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-09-30"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						},
						{
							"name": "11. Download transactions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{dowload_link}}",
									"host": [
										"{{dowload_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12 Read Transaction Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4d9f6e-840c-453b-9c50-7dab50798d55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Links exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('transactionsDetails');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionAmount');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionId');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions/{{transaction_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions",
										"{{transaction_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3aeff3bf-4952-4d1b-b13b-ae5b7f4f76af",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "671653f9-71e0-475f-bf17-e0733d01c542",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT->OAUTH 1 SCA method - read accounts/balances/transactions",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0891fdfe-e521-476e-a4d2-c4dd5682ec94",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32c9b792-5104-4a46-9a59-7db67cd18281",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32148d4d-e136-4a8a-b9fa-713ef1c7c9a3",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"ScaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f133a1e4-bcc8-40d1-a620-d80e436dea30",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94a4d00e-0820-4bd2-9e68-ffeebbc0e1e0",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"ScaOAuth exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaOAuth');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "813ee9f9-5fd2-4152-b08f-31d1501a0815",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d5238da-15b1-4958-b28c-75418843bf5c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e37b5b3-e333-48a5-b1d8-3fad4e5d7664",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.  Login for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd9d0e90-4d2e-408c-a7c1-648ab8d8c30f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"bearer\", jsonData.bearerToken.access_token);",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"loginForConsent"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "consentId",
											"value": "{{internal_consent_id}}"
										},
										{
											"key": "authorisationId",
											"value": "{{authorisation_id}}"
										},
										{
											"key": "opType",
											"value": "CONSENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.  Create consent in Ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a719e908-5314-46ba-a360-45244a729df4",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"scaMethod\", jsonData.scaMethods[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\"\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Select SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d36da57d-b9dd-46ef-9c8f-73d22f6a57d6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{scaMethod}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"scaMethods",
										"{{scaMethod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Send an authentication code for validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9f46dd3-565f-496c-b8df-39a345808b2f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"authCode"
									],
									"query": [
										{
											"key": "authCode",
											"value": "{{tan}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update PSU Data in consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "473746c3-5f7a-4247-a082-93fc4055586c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_single}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d792c9ee-936e-48d1-a6a1-d2b6a23d80f6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26fdadb7-a553-4288-9dcd-c283d5d6c4ec",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "228857f7-1fdf-452b-ab7b-62fe6450dcd3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08f97bfc-987a-4142-aef1-4985350baa31",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc9c08d8-2b1e-41b2-8649-11cb66bc839d",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"//",
											"// This test fails and is blocked by the https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/987 issue.",
											"//",
											"",
											"        ",
											"//        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"//           pm.expect(firstAccount).to.have.property('balances');",
											"//        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42d3db2b-dc95-4b6b-bf21-59e03447628b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "15. Read Account Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c58a773-dbe1-40f5-bd00-1acc93deb276",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.account).to.have.property('_links');",
											"        pm.expect(jsonData.account._links).to.have.property('balances');",
											"        pm.expect(jsonData.account._links).to.have.property('transactions');",
											"        pm.expect(jsonData.account).to.have.property('resourceId');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData.account).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
							},
							"response": []
						},
						{
							"name": "16. Read Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80f011b7-c310-4378-a46c-8b2c4c1d4f40",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "17. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421f31b2-f2a8-4407-8cf2-a7f24b3e12b0",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"transaction_id\", jsonData.transactions.booked[0].transactionId);",
											"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Links exist\", function () {",
											"    pm.expect(jsonData).to.have.property('transactions');",
											"    pm.expect(jsonData.transactions).to.have.property('_links');",
											"",
											"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
											"    pm.expect(jsonData.transactions._links).to.have.property('account');",
											"    pm.expect(jsonData._links).to.have.property('download');",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afd6f340-6794-431a-97ce-626907b58e8f",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth(); ",
											"var yyyy_end = end.getFullYear() + 1;",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000*150));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth(); ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&withBalance={{with_balance}}&dateFrom=2018-01-01&dateTo=2020-09-30",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-09-30"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						},
						{
							"name": "18. Download transactions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{dowload_link}}",
									"host": [
										"{{dowload_link}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "19 Read Transaction Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "209a3c02-7812-4fc7-8dd7-edb70949e27a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Links exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('transactionsDetails');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionAmount');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionId');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions/{{transaction_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions",
										"{{transaction_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0726c042-b348-4b09-ab8b-a4c1c7b86452",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb3a33ff-6f74-4eff-86b3-88d269692f19",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f99c212-f1db-42a3-a3b9-f58dff4bc985",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "242235b3-6db2-4afd-a7bc-8667e221ad17",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9badc50-0043-4db7-bc8c-b6fcbb94cfcb",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "20608ecd-59c2-4797-8155-d6b4b10fe943",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "TPP-Redirect-URI",
										"type": "text"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"value": "TPP-Nok-Redirect-URI",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38515ff-0714-4d0c-ab20-49e8dee38202",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Sca status is psuIdentified\", () => {",
											"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"// splits string link by '/' to array and gets the last element - authorisationId",
											"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
											"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
											"",
											"    var a = jsonData._links.scaRedirect.href.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d10f10ad-011b-466d-9229-0f7fca0cacce",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
							},
							"response": []
						},
						{
							"name": "5. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32657d5f-88a7-4303-9df8-67f446e1e80a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{authorisation_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated DECOUPLED 0 SCA methods",
					"item": [
						{
							"name": "1. Set decoupled SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d91eeba8-a0fa-4676-bf48-2bc37569710d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"DECOUPLED\",\n  \"EMBEDDED\",\n  \"REDIRECT\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3e6636b-34bd-421e-b02c-36471f85fbb1",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27cc1d31-47ef-4ce3-addc-3c38fb563003",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bc51182-9849-4880-bb05-b430f6ea6e45",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Sca status is psuIdentified\", () => {",
											"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"// splits string link by '/' to array and gets the last element - authorisationId",
											"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
											"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db0f66de-fc45-48c1-9df8-53f9639c353b",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data - psuData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79acef2b-244b-402e-80a2-aa1c732c1461",
										"exec": [
											"pm.test(\"Status code is 406\", () => {",
											"    pm.response.to.have.status(406);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT Internal Request ID",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1426fa81-d118-4b83-8fe3-f785227b351e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6495a1af-6984-46c8-8c49-63a96bc2d65c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}/{inr-id}/\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a6dac88-4ef8-41a9-a360-369d795e57e4",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abae8378-4bd2-484e-8dca-6fb929533d88",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const internalRequestId = a.pop();",
											"    pm.globals.set(\"internal_request_id\", internalRequestId);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "TPP-Redirect-URI",
										"type": "text"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"value": "TPP-Nok-Redirect-URI",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d418650-ebdd-4cc7-abb4-9e71cbc5b2c2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Internal request IDs are equals\", () => {",
											"    var a = jsonData._links.scaRedirect.href.split('/');",
											"    a.pop();",
											"    const internalRequestId = a.pop();",
											"    const internalRequestIdGlobal = pm.globals.get(\"internal_request_id\");",
											"    pm.expect(internalRequestId).to.eql(internalRequestIdGlobal);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "651fd7bf-cc50-479c-9b4c-3f51924bfefe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a627ef4-4f7c-47f1-a44f-529ef1cf1092",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f408020f-155c-4d2d-89f5-4d048916a460",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED validation of authorisation sub-resources",
					"item": [
						{
							"name": "Explicit",
							"item": [
								{
									"name": "Start authorisation with empty PSU ID",
									"item": [
										{
											"name": "1. Enable signing basket support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15909d6d-dadf-4cd8-8946-129d1e03fb35",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6805a4a2-6833-4932-bbf5-fc5d1f7c13af",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "489f7bfa-ca2d-43ba-a0cd-7a315f066b0a",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e1f9b8cb-bd0a-4d2d-a8f9-96e3a87d74cf",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "redirect URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d71412e6-9896-4755-9502-5f7f09a6b88a",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a372fe71-98dd-460f-ad87-1bf43f080993",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Start the authorisation process for consent empty PSU ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dbc9fea5-5475-49f5-b738-4a05a31f99cc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee7e0b58-4f3a-4262-aa1f-6f59cbe10386",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "6. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "68a9f5a0-554e-47c9-a9a7-87dd525b748a",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is failed\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('failed');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start authorisation with wrong PSU ID",
									"item": [
										{
											"name": "1. Enable signing basket support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a07616e-10a1-48c4-b712-6ddf6c5fe106",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c94a945f-2dda-4fa4-94f3-dd8a7a924730",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7478bee6-7547-48c8-9609-81080d1596e5",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a434af7c-6b0f-4211-9ec9-a2a37951cce1",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "redirect URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "071e3e0f-83ac-40f9-87b5-2052ef643a57",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3b9c5b8c-ac7c-4339-a839-a0c70d1be38f",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Start the authorisation process for consent wrong PSU ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "88cb1942-c980-4c0b-98cb-786b69858bd8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3fdb3d2e-c79b-4af6-bd1f-7a22d095aa49",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}-wrong"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "6. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45e66654-b51e-4a69-881d-b9f191b587ac",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is psuIdentified\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start second authorisation with wrong PSU ID",
									"item": [
										{
											"name": "1. Enable signing basket support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2145e381-97a6-4594-9392-6b4f1e8c10aa",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee91ae91-d9ff-489e-b25d-ddab9cd526f1",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated with empty PSU ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f10bd369-b883-4a14-82a2-26067574543f",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c124aaf5-0754-4cc5-8d7e-4b48beb45ee3",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"type": "text",
														"value": "{{psu_id_single}}",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "psu-ip-address",
														"type": "text",
														"value": "{{ip_address}}"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"type": "text",
														"value": "true"
													},
													{
														"key": "TPP-Redirect-URI",
														"type": "text",
														"value": "redirect URI"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent empty PSU ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "78a6f99a-1e43-4104-80b1-2beafd3dbac8",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "63af3d99-8476-4a2b-9a58-ae6925b65ef8",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d4cbc078-f58c-46f7-b594-b4cee3652918",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "51547b5a-d6d7-4507-8312-6fe596934c1c",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "6. Start the authorisation process for consent wrong PSU ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb1c1a0e-78ef-4eb0-9cdd-9293e95d43e4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2ffdba11-00f7-431c-9f68-785a9731bd35",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "7. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57879178-35ce-444d-b747-f6764c8e9693",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is received\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('received');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Implicit",
							"item": [
								{
									"name": "Start authorisation with PSU ID",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22cc74bb-164e-46ff-9a1c-0bf96c094e97",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52c5e823-0810-4cb5-a6b0-8c8a59a4aead",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb01cebc-4710-452b-8d75-b11db706c71e",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ed0b878b-42bd-446a-827b-bc0a3ba5a342",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f1b22e6-113a-4628-b3ae-729cc97dd40f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d3febad1-5128-47ec-b226-78e6ef584137",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ff290be3-774c-4ba2-95ea-abe1edfc19f7",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is failed\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('failed');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start authorisation with empty PSU ID",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f0b6c68-55c3-4fb8-940a-30bc61f5dcf1",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a2ec1d6-b3a5-48a9-b7fd-feb09f98b907",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d6bc730-be08-489d-9ca7-2d78e9aabf3e",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bfac9dc5-2ac2-4110-8538-d6cea70be7d2",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5e1495da-4b40-48fe-85a3-d5387d1f049c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9c6dbbc-049a-4a44-bfde-4e49c74d1733",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73b8cf95-6a19-4983-8cc6-4a228df01e0c",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is failed\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('failed');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start authorisation with wrong PSU ID",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "305a3bac-fbeb-4598-9a50-e22bb67ab970",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "939a5706-16e6-4821-a468-97b99c99630d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e28ddc14-3a2d-475b-86a1-5b5c94197177",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c9254093-3d6a-46a0-9939-5906cd4a82fc",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ad1000ef-3b81-432d-bf08-d2d02915c99c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8934d5d9-e3a9-49ca-8fa6-59648c6221ee",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}-wrong"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start authorisation with PSU ID after finalisation",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1ab2e88f-5529-4f56-92e9-c14aa977da0f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fbcb9311-23ba-4cb0-bb52-45a13245bee9",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": true,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "51b7ed29-b786-4993-965c-f69ea65bd551",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fa3db495-3f71-4fc8-87d4-89443eba450f",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c61e75bd-5aea-4de1-bbc4-e1cb7ee63a51",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU Data for consent finalisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e27394f1-4c39-4a5c-8c89-4e8e3bf8abea",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Get consent Authorisation Sub-Resources Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1421332a-53c3-4658-84ae-5b1e2bd7ac19",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
											},
											"response": []
										},
										{
											"name": "7. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c4c1cf70-45b9-4091-b659-01345d27806d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5b1b3040-83eb-483e-84e0-b858e38434fa",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 409\", function () {",
															"    pm.response.to.have.status(409);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Start authorisation with PSU ID for consent with empty PSU ID",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd01971e-02b2-43d2-a85c-287c5b5bb805",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a36b933-8bbd-467d-9e27-25709a99f82b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false,\n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create consent dedicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fcf9aab0-ddbc-41fe-9fee-0fae9cd9ddeb",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent Id exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "be87ab80-25a0-4b48-aca5-2c2544687adb",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "psu-ip-address",
														"value": "{{ip_address}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3110bd5a-c861-4287-a666-0e394f5cc18e",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuIdentified', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e939f546-577e-4360-bec7-8e8d7c5caeac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b3c14872-ed76-426f-857f-14454b5fc086",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"disabled": true
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "6. Get the status of first authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da4135e0-db81-42c5-bab0-5de0567c2f65",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"scaStatus of first authorisation is failed\", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('failed');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v1",
														"ais",
														"consent",
														"authorisation",
														"{{authorisation_id}}",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated REDIRECT  Validation URLs in headers",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7d4a30d-80bd-4a32-9f1a-b40b687978ea",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties Validation ON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0993914-f504-4a84-b423-979a446ba780",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"SCA\", \"LAST\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false,\n    \t\"checkUriComplianceToDomainSupported\": true\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent Valid URLs. TppMessages are empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e86d101-d1e4-48d6-a861-709179faf803",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3ad6e7f-1102-4d36-becd-4c6a74aed0a7",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"pm.test(\"Links exist\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaRedirect');",
											"    pm.expect(_links).to.have.property('self');",
											"    pm.expect(_links).to.have.property('status');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"    pm.expect(_links).to.have.property('confirmation');",
											"",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);",
											"",
											"pm.test(\"Response has tppMessages\", () => {",
											"  ",
											"    pm.expect(jsonData).to.not.have.property('tppMessages');",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "http://teambank.de/ok-ddd",
										"type": "text"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"value": "http://teambank.de/no-ok-ddd",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "-----BEGIN CERTIFICATE----- MIIIfDCCBmSgAwIBAgIQK0cvdDjch9A0kQkCfpLEnjANBgkqhkiG9w0BAQsFADBb MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMRwwGgYDVQQDExNE LVRSVVNUIENBIDItMSAyMDE4MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjAeFw0x OTA4MjIwODI1MjZaFw0yMTA5MDEwODI1MjZaMIIBLjELMAkGA1UEBhMCREUxHjAc BgNVBAoTFVRlYW1CYW5rIEFHIE51ZXJuYmVyZzEUMBIGA1UEAxMLdGVhbWJhbmsu ZGUxEjAQBgNVBAcTCU51ZXJuYmVyZzETMBEGCysGAQQBgjc8AgEDEwJERTEbMBkG A1UEYRMSUFNEREUtQkFGSU4tMTE1MTYyMQ4wDAYDVQQRDAU5MDQ3MTEdMBsGA1UE DwwUUHJpdmF0ZSBPcmdhbml6YXRpb24xGjAYBgNVBAkTEUJldXRoZW5lciBTdHIu IDI1MRIwEAYDVQQFEwlIUkIgMTU0MDkxGjAYBgsrBgEEAYI3PAIBAQwJTnVlcm5i ZXJnMRcwFQYLKwYBBAGCNzwCAQIMBkJheWVybjEPMA0GA1UECBMGQmF5ZXJuMIIB IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNW5+zVU9dL11U3TE/WIMDVh uuvS0RBYNCifu8wGKB2dq8D77U2fOvwuBOi0poqWrzeI3uv7nghRN3uvPMEu905w X/Z0X0IuglaJOT89a5iexQkN6fhN+APUGwxgKo8EgEa4o6AKSoLcrqAtPo90c3O/ 9u0fMDJAvvdB/4cIix1HfjiXr9E4Qeu+qUCf5wr6sOgvVC1iEGZEO2wKmn9pXvGt Z382nvtd5HTpIz8dSWEO+zqIXdE2DBTO8YSlqkYD4k8/Vlb9UcxV4QMt4NLBs6ic 0PaAQttnYZeLxtOr/2vTuKa1UJOPVWTHTz7pJfvApb/YuuHevBGZzz9Y0ntTewID AQABo4IDZTCCA2EwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1Ud IwQYMBaAFI7OOlwxOChRat43OZ37e/vSNMdvMIG+BggrBgEFBQcBAwSBsTCBrjCB jAYGBACBmCcCMIGBMEwwEQYHBACBmCcBBAwGUFNQX0lDMBEGBwQAgZgnAQMMBlBT UF9BSTARBgcEAIGYJwECDAZQU1BfUEkwEQYHBACBmCcBAQwGUFNQX0FTDCdGZWRl cmFsIEZpbmFuY2lhbCBTdXBlcnZpc29yeSBBdXRob3JpdHkMCERFLUJBRklOMAgG BgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzCB/gYIKwYBBQUHAQEEgfEwge4w NwYIKwYBBQUHMAGGK2h0dHA6Ly9kLXRydXN0LWNhLTItMS0yMDE4Lm9jc3AuZC10 cnVzdC5uZXQwQgYIKwYBBQUHMAKGNmh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY2dp LWJpbi9ELVRSVVNUX0NBXzItMV8yMDE4LmNydDBvBggrBgEFBQcwAoZjbGRhcDov L2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwQ0ElMjAyLTElMjAy MDE4LE89RC1UcnVzdCUyMEdtYkgsQz1ERT9jQUNlcnRpZmljYXRlP2Jhc2U/MCMG A1UdIAQcMBowCQYHBACL7EABBDANBgsrBgEEAaU0AoEWBDCB8AYDVR0fBIHoMIHl MIHioIHfoIHchmlsZGFwOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJV U1QlMjBDQSUyMDItMSUyMDIwMTgsTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRp ZmljYXRlcmV2b2NhdGlvbmxpc3SGMmh0dHA6Ly9jcmwuZC10cnVzdC5uZXQvY3Js L2QtdHJ1c3RfY2FfMi0xXzIwMTguY3JshjtodHRwOi8vY2RuLmQtdHJ1c3QtY2xv dWRjcmwubmV0L2NybC9kLXRydXN0X2NhXzItMV8yMDE4LmNybDAdBgNVHQ4EFgQU bcTWA4GKBHezJEK0RxetzOy0k00wDgYDVR0PAQH/BAQDAgWgMBYGA1UdEQQPMA2C C3RlYW1iYW5rLmRlMA0GCSqGSIb3DQEBCwUAA4ICAQBuChfnrJ7vVYXSUo2t0E42 hDJmVlkyEaXwoYXSQDuxEZp100r0e4aP9KL+OAXlLU34mhJn/iRHPdeNFYuthVqz uQlWe7npaHCWT+qS6ip6whPqx2QZrkq84QCVkjMj3CmMKEUM8WYYwOsb3IDjlUwH PHiJXdYi5g+w7+4eRML2ZVPggRwCnSvfJ+Gv4AD3ZjOYFgZNn0NtC2qatHDpPHbb gRoYgpEWrATUb1RFbINqMdSQqx4dVPti7DGYXO3gS6HjsHVhV/Xandqu3hx0VsRo K9LWyrD2teenkF4taGpLAlVW+r0HGiP9NWZ3gdFU1BhPTvjoEq/1XLDuTC4ovK1Q t8l6OSAwOxsjpQWoqfgeb3GFLnJjMU/UD+9lco+UpNHqSrYbsdovlNKc1dCT+QAo SAE8SagenB14Gj6KfukVgFGkY/wHxJfWbBESfVWujNU0DQNyDhbO7Z70x5QgNX4y 4P1AoLE0LiGfNYJCywhC7CIsWfInrZkIKkZIV6wMskU3xxYiGiKt9VwJXnns8pDb EY2bAwfG2BklLSAPJKFi+39SX166OSW/UROLgxVshLCoWzsD535DJpTfaDp1pyNq qgWfshNJKPP2B5pa8xD6OFoJM4xELY9nGIAQlarNCJOnv4hfN0FwLbCN5nfx2mcq VpnQEnueeWmog82UVzfVow== -----END CERTIFICATE-----",
										"type": "text",
										"disabled": true
									},
									{
										"key": "TPP-Notification-URI",
										"value": "http://teambank.de/notificaton",
										"type": "text",
										"disabled": true
									},
									{
										"key": "TPP-Notification-Content-Preferred",
										"value": "status=LAST,  PROCESS",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Create AIS consent Invalid URLs. TppMessages are not empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7012d34c-2129-4c6a-80ab-c8ca31cd5627",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a0d35302-14fa-46ae-b2b1-ff2541e81161",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"pm.test(\"Links exist\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaRedirect');",
											"    pm.expect(_links).to.have.property('self');",
											"    pm.expect(_links).to.have.property('status');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"    pm.expect(_links).to.have.property('confirmation');",
											"",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);",
											"",
											"",
											"pm.test(\"Response has tppMessages\", () => {",
											"   ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    var tppMessages = jsonData.tppMessages;",
											"    ",
											"     pm.expect(Array.isArray(tppMessages)).to.be.true;",
											"});",
											"",
											"pm.test(\"TppMessages is correct\", () => {",
											"     var tppMessage = jsonData.tppMessages[0];",
											"     ",
											"     pm.expect(tppMessage).to.have.property('category');",
											"     pm.expect(tppMessage.category).to.eql('WARNING');",
											"     ",
											"     pm.expect(tppMessage).to.have.property('code');",
											"     pm.expect(tppMessage.code).to.eql('WARNING');",
											"     ",
											"     pm.expect(tppMessage).to.have.property('text');",
											"     pm.expect(tppMessage.text).to.eql('TPP URIs are not compliant with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "http://teambank.de/ok-url/test",
										"type": "text"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"value": "http://teambank.fe/no-ok-url/test",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "-----BEGIN CERTIFICATE----- MIIIfDCCBmSgAwIBAgIQK0cvdDjch9A0kQkCfpLEnjANBgkqhkiG9w0BAQsFADBb MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMRwwGgYDVQQDExNE LVRSVVNUIENBIDItMSAyMDE4MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjAeFw0x OTA4MjIwODI1MjZaFw0yMTA5MDEwODI1MjZaMIIBLjELMAkGA1UEBhMCREUxHjAc BgNVBAoTFVRlYW1CYW5rIEFHIE51ZXJuYmVyZzEUMBIGA1UEAxMLdGVhbWJhbmsu ZGUxEjAQBgNVBAcTCU51ZXJuYmVyZzETMBEGCysGAQQBgjc8AgEDEwJERTEbMBkG A1UEYRMSUFNEREUtQkFGSU4tMTE1MTYyMQ4wDAYDVQQRDAU5MDQ3MTEdMBsGA1UE DwwUUHJpdmF0ZSBPcmdhbml6YXRpb24xGjAYBgNVBAkTEUJldXRoZW5lciBTdHIu IDI1MRIwEAYDVQQFEwlIUkIgMTU0MDkxGjAYBgsrBgEEAYI3PAIBAQwJTnVlcm5i ZXJnMRcwFQYLKwYBBAGCNzwCAQIMBkJheWVybjEPMA0GA1UECBMGQmF5ZXJuMIIB IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNW5+zVU9dL11U3TE/WIMDVh uuvS0RBYNCifu8wGKB2dq8D77U2fOvwuBOi0poqWrzeI3uv7nghRN3uvPMEu905w X/Z0X0IuglaJOT89a5iexQkN6fhN+APUGwxgKo8EgEa4o6AKSoLcrqAtPo90c3O/ 9u0fMDJAvvdB/4cIix1HfjiXr9E4Qeu+qUCf5wr6sOgvVC1iEGZEO2wKmn9pXvGt Z382nvtd5HTpIz8dSWEO+zqIXdE2DBTO8YSlqkYD4k8/Vlb9UcxV4QMt4NLBs6ic 0PaAQttnYZeLxtOr/2vTuKa1UJOPVWTHTz7pJfvApb/YuuHevBGZzz9Y0ntTewID AQABo4IDZTCCA2EwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1Ud IwQYMBaAFI7OOlwxOChRat43OZ37e/vSNMdvMIG+BggrBgEFBQcBAwSBsTCBrjCB jAYGBACBmCcCMIGBMEwwEQYHBACBmCcBBAwGUFNQX0lDMBEGBwQAgZgnAQMMBlBT UF9BSTARBgcEAIGYJwECDAZQU1BfUEkwEQYHBACBmCcBAQwGUFNQX0FTDCdGZWRl cmFsIEZpbmFuY2lhbCBTdXBlcnZpc29yeSBBdXRob3JpdHkMCERFLUJBRklOMAgG BgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzCB/gYIKwYBBQUHAQEEgfEwge4w NwYIKwYBBQUHMAGGK2h0dHA6Ly9kLXRydXN0LWNhLTItMS0yMDE4Lm9jc3AuZC10 cnVzdC5uZXQwQgYIKwYBBQUHMAKGNmh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY2dp LWJpbi9ELVRSVVNUX0NBXzItMV8yMDE4LmNydDBvBggrBgEFBQcwAoZjbGRhcDov L2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwQ0ElMjAyLTElMjAy MDE4LE89RC1UcnVzdCUyMEdtYkgsQz1ERT9jQUNlcnRpZmljYXRlP2Jhc2U/MCMG A1UdIAQcMBowCQYHBACL7EABBDANBgsrBgEEAaU0AoEWBDCB8AYDVR0fBIHoMIHl MIHioIHfoIHchmlsZGFwOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJV U1QlMjBDQSUyMDItMSUyMDIwMTgsTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRp ZmljYXRlcmV2b2NhdGlvbmxpc3SGMmh0dHA6Ly9jcmwuZC10cnVzdC5uZXQvY3Js L2QtdHJ1c3RfY2FfMi0xXzIwMTguY3JshjtodHRwOi8vY2RuLmQtdHJ1c3QtY2xv dWRjcmwubmV0L2NybC9kLXRydXN0X2NhXzItMV8yMDE4LmNybDAdBgNVHQ4EFgQU bcTWA4GKBHezJEK0RxetzOy0k00wDgYDVR0PAQH/BAQDAgWgMBYGA1UdEQQPMA2C C3RlYW1iYW5rLmRlMA0GCSqGSIb3DQEBCwUAA4ICAQBuChfnrJ7vVYXSUo2t0E42 hDJmVlkyEaXwoYXSQDuxEZp100r0e4aP9KL+OAXlLU34mhJn/iRHPdeNFYuthVqz uQlWe7npaHCWT+qS6ip6whPqx2QZrkq84QCVkjMj3CmMKEUM8WYYwOsb3IDjlUwH PHiJXdYi5g+w7+4eRML2ZVPggRwCnSvfJ+Gv4AD3ZjOYFgZNn0NtC2qatHDpPHbb gRoYgpEWrATUb1RFbINqMdSQqx4dVPti7DGYXO3gS6HjsHVhV/Xandqu3hx0VsRo K9LWyrD2teenkF4taGpLAlVW+r0HGiP9NWZ3gdFU1BhPTvjoEq/1XLDuTC4ovK1Q t8l6OSAwOxsjpQWoqfgeb3GFLnJjMU/UD+9lco+UpNHqSrYbsdovlNKc1dCT+QAo SAE8SagenB14Gj6KfukVgFGkY/wHxJfWbBESfVWujNU0DQNyDhbO7Z70x5QgNX4y 4P1AoLE0LiGfNYJCywhC7CIsWfInrZkIKkZIV6wMskU3xxYiGiKt9VwJXnns8pDb EY2bAwfG2BklLSAPJKFi+39SX166OSW/UROLgxVshLCoWzsD535DJpTfaDp1pyNq qgWfshNJKPP2B5pa8xD6OFoJM4xELY9nGIAQlarNCJOnv4hfN0FwLbCN5nfx2mcq VpnQEnueeWmog82UVzfVow== -----END CERTIFICATE-----",
										"type": "text"
									},
									{
										"key": "TPP-Notification-URI",
										"value": "http://teambank.de/notificaton",
										"type": "text"
									},
									{
										"key": "TPP-Notification-Content-Preferred",
										"value": "status=LAST,  PROCESS",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "5. Create AIS consent Invalid notyfication URLs. TppMessages are not empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2001c5e-6f71-4a91-a6e1-d952cd6c7491",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fc74e8d-d349-4725-9a1a-9a18dd6b2173",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"pm.test(\"Links exist\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaRedirect');",
											"    pm.expect(_links).to.have.property('self');",
											"    pm.expect(_links).to.have.property('status');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"    pm.expect(_links).to.have.property('confirmation');",
											"",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);",
											"",
											"",
											"pm.test(\"Response has tppMessages\", () => {",
											"   ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    var tppMessages = jsonData.tppMessages;",
											"    ",
											"     pm.expect(Array.isArray(tppMessages)).to.be.true;",
											"});",
											"",
											"pm.test(\"TppMessages is correct\", () => {",
											"     var tppMessage = jsonData.tppMessages[0];",
											"     ",
											"     pm.expect(tppMessage).to.have.property('category');",
											"     pm.expect(tppMessage.category).to.eql('WARNING');",
											"     ",
											"     pm.expect(tppMessage).to.have.property('code');",
											"     pm.expect(tppMessage.code).to.eql('WARNING');",
											"     ",
											"     pm.expect(tppMessage).to.have.property('text');",
											"     pm.expect(tppMessage.text).to.eql('TPP URIs are not compliant with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "date",
										"type": "text",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"type": "text",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"type": "text",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "http://teambank.de/ok-url/test"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "http://teambank.de/no-ok-url/test"
									},
									{
										"key": "psu-ip-address",
										"type": "text",
										"value": "{{ip_address}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"type": "text",
										"value": "-----BEGIN CERTIFICATE----- MIIIfDCCBmSgAwIBAgIQK0cvdDjch9A0kQkCfpLEnjANBgkqhkiG9w0BAQsFADBb MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMRwwGgYDVQQDExNE LVRSVVNUIENBIDItMSAyMDE4MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjAeFw0x OTA4MjIwODI1MjZaFw0yMTA5MDEwODI1MjZaMIIBLjELMAkGA1UEBhMCREUxHjAc BgNVBAoTFVRlYW1CYW5rIEFHIE51ZXJuYmVyZzEUMBIGA1UEAxMLdGVhbWJhbmsu ZGUxEjAQBgNVBAcTCU51ZXJuYmVyZzETMBEGCysGAQQBgjc8AgEDEwJERTEbMBkG A1UEYRMSUFNEREUtQkFGSU4tMTE1MTYyMQ4wDAYDVQQRDAU5MDQ3MTEdMBsGA1UE DwwUUHJpdmF0ZSBPcmdhbml6YXRpb24xGjAYBgNVBAkTEUJldXRoZW5lciBTdHIu IDI1MRIwEAYDVQQFEwlIUkIgMTU0MDkxGjAYBgsrBgEEAYI3PAIBAQwJTnVlcm5i ZXJnMRcwFQYLKwYBBAGCNzwCAQIMBkJheWVybjEPMA0GA1UECBMGQmF5ZXJuMIIB IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNW5+zVU9dL11U3TE/WIMDVh uuvS0RBYNCifu8wGKB2dq8D77U2fOvwuBOi0poqWrzeI3uv7nghRN3uvPMEu905w X/Z0X0IuglaJOT89a5iexQkN6fhN+APUGwxgKo8EgEa4o6AKSoLcrqAtPo90c3O/ 9u0fMDJAvvdB/4cIix1HfjiXr9E4Qeu+qUCf5wr6sOgvVC1iEGZEO2wKmn9pXvGt Z382nvtd5HTpIz8dSWEO+zqIXdE2DBTO8YSlqkYD4k8/Vlb9UcxV4QMt4NLBs6ic 0PaAQttnYZeLxtOr/2vTuKa1UJOPVWTHTz7pJfvApb/YuuHevBGZzz9Y0ntTewID AQABo4IDZTCCA2EwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1Ud IwQYMBaAFI7OOlwxOChRat43OZ37e/vSNMdvMIG+BggrBgEFBQcBAwSBsTCBrjCB jAYGBACBmCcCMIGBMEwwEQYHBACBmCcBBAwGUFNQX0lDMBEGBwQAgZgnAQMMBlBT UF9BSTARBgcEAIGYJwECDAZQU1BfUEkwEQYHBACBmCcBAQwGUFNQX0FTDCdGZWRl cmFsIEZpbmFuY2lhbCBTdXBlcnZpc29yeSBBdXRob3JpdHkMCERFLUJBRklOMAgG BgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzCB/gYIKwYBBQUHAQEEgfEwge4w NwYIKwYBBQUHMAGGK2h0dHA6Ly9kLXRydXN0LWNhLTItMS0yMDE4Lm9jc3AuZC10 cnVzdC5uZXQwQgYIKwYBBQUHMAKGNmh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY2dp LWJpbi9ELVRSVVNUX0NBXzItMV8yMDE4LmNydDBvBggrBgEFBQcwAoZjbGRhcDov L2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwQ0ElMjAyLTElMjAy MDE4LE89RC1UcnVzdCUyMEdtYkgsQz1ERT9jQUNlcnRpZmljYXRlP2Jhc2U/MCMG A1UdIAQcMBowCQYHBACL7EABBDANBgsrBgEEAaU0AoEWBDCB8AYDVR0fBIHoMIHl MIHioIHfoIHchmlsZGFwOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJV U1QlMjBDQSUyMDItMSUyMDIwMTgsTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRp ZmljYXRlcmV2b2NhdGlvbmxpc3SGMmh0dHA6Ly9jcmwuZC10cnVzdC5uZXQvY3Js L2QtdHJ1c3RfY2FfMi0xXzIwMTguY3JshjtodHRwOi8vY2RuLmQtdHJ1c3QtY2xv dWRjcmwubmV0L2NybC9kLXRydXN0X2NhXzItMV8yMDE4LmNybDAdBgNVHQ4EFgQU bcTWA4GKBHezJEK0RxetzOy0k00wDgYDVR0PAQH/BAQDAgWgMBYGA1UdEQQPMA2C C3RlYW1iYW5rLmRlMA0GCSqGSIb3DQEBCwUAA4ICAQBuChfnrJ7vVYXSUo2t0E42 hDJmVlkyEaXwoYXSQDuxEZp100r0e4aP9KL+OAXlLU34mhJn/iRHPdeNFYuthVqz uQlWe7npaHCWT+qS6ip6whPqx2QZrkq84QCVkjMj3CmMKEUM8WYYwOsb3IDjlUwH PHiJXdYi5g+w7+4eRML2ZVPggRwCnSvfJ+Gv4AD3ZjOYFgZNn0NtC2qatHDpPHbb gRoYgpEWrATUb1RFbINqMdSQqx4dVPti7DGYXO3gS6HjsHVhV/Xandqu3hx0VsRo K9LWyrD2teenkF4taGpLAlVW+r0HGiP9NWZ3gdFU1BhPTvjoEq/1XLDuTC4ovK1Q t8l6OSAwOxsjpQWoqfgeb3GFLnJjMU/UD+9lco+UpNHqSrYbsdovlNKc1dCT+QAo SAE8SagenB14Gj6KfukVgFGkY/wHxJfWbBESfVWujNU0DQNyDhbO7Z70x5QgNX4y 4P1AoLE0LiGfNYJCywhC7CIsWfInrZkIKkZIV6wMskU3xxYiGiKt9VwJXnns8pDb EY2bAwfG2BklLSAPJKFi+39SX166OSW/UROLgxVshLCoWzsD535DJpTfaDp1pyNq qgWfshNJKPP2B5pa8xD6OFoJM4xELY9nGIAQlarNCJOnv4hfN0FwLbCN5nfx2mcq VpnQEnueeWmog82UVzfVow== -----END CERTIFICATE-----"
									},
									{
										"key": "TPP-Notification-URI",
										"type": "text",
										"value": "http://teambank.we/notificaton"
									},
									{
										"key": "TPP-Notification-Content-Preferred",
										"type": "text",
										"value": "status=LAST,  PROCESS"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "6. Set ASPSP properties Validation OFF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dc704ed-7d4a-44cf-be59-9d64de662521",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"SCA\", \"LAST\"\t\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false,\n    \t\t\"checkUriComplianceToDomainSupported\": false\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create AIS consent Invalid all URLs. TppMessages are empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2e00b80-8d98-4b44-9f0d-465867a116c9",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d51274b7-a176-4174-8afc-7006340753d8",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"pm.test(\"Links exist\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaRedirect');",
											"    pm.expect(_links).to.have.property('self');",
											"    pm.expect(_links).to.have.property('status');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"    pm.expect(_links).to.have.property('confirmation');",
											"",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);",
											"",
											"pm.test(\"Response has tppMessages\", () => {",
											"  ",
											"    pm.expect(jsonData).to.not.have.property('tppMessages');",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "date",
										"type": "text",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"type": "text",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"type": "text",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "http://teambank.we/ok-url/test"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "http://teambank.we/no-ok-url/test"
									},
									{
										"key": "psu-ip-address",
										"type": "text",
										"value": "{{ip_address}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"type": "text",
										"value": "-----BEGIN CERTIFICATE----- MIIIfDCCBmSgAwIBAgIQK0cvdDjch9A0kQkCfpLEnjANBgkqhkiG9w0BAQsFADBb MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMRwwGgYDVQQDExNE LVRSVVNUIENBIDItMSAyMDE4MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjAeFw0x OTA4MjIwODI1MjZaFw0yMTA5MDEwODI1MjZaMIIBLjELMAkGA1UEBhMCREUxHjAc BgNVBAoTFVRlYW1CYW5rIEFHIE51ZXJuYmVyZzEUMBIGA1UEAxMLdGVhbWJhbmsu ZGUxEjAQBgNVBAcTCU51ZXJuYmVyZzETMBEGCysGAQQBgjc8AgEDEwJERTEbMBkG A1UEYRMSUFNEREUtQkFGSU4tMTE1MTYyMQ4wDAYDVQQRDAU5MDQ3MTEdMBsGA1UE DwwUUHJpdmF0ZSBPcmdhbml6YXRpb24xGjAYBgNVBAkTEUJldXRoZW5lciBTdHIu IDI1MRIwEAYDVQQFEwlIUkIgMTU0MDkxGjAYBgsrBgEEAYI3PAIBAQwJTnVlcm5i ZXJnMRcwFQYLKwYBBAGCNzwCAQIMBkJheWVybjEPMA0GA1UECBMGQmF5ZXJuMIIB IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNW5+zVU9dL11U3TE/WIMDVh uuvS0RBYNCifu8wGKB2dq8D77U2fOvwuBOi0poqWrzeI3uv7nghRN3uvPMEu905w X/Z0X0IuglaJOT89a5iexQkN6fhN+APUGwxgKo8EgEa4o6AKSoLcrqAtPo90c3O/ 9u0fMDJAvvdB/4cIix1HfjiXr9E4Qeu+qUCf5wr6sOgvVC1iEGZEO2wKmn9pXvGt Z382nvtd5HTpIz8dSWEO+zqIXdE2DBTO8YSlqkYD4k8/Vlb9UcxV4QMt4NLBs6ic 0PaAQttnYZeLxtOr/2vTuKa1UJOPVWTHTz7pJfvApb/YuuHevBGZzz9Y0ntTewID AQABo4IDZTCCA2EwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1Ud IwQYMBaAFI7OOlwxOChRat43OZ37e/vSNMdvMIG+BggrBgEFBQcBAwSBsTCBrjCB jAYGBACBmCcCMIGBMEwwEQYHBACBmCcBBAwGUFNQX0lDMBEGBwQAgZgnAQMMBlBT UF9BSTARBgcEAIGYJwECDAZQU1BfUEkwEQYHBACBmCcBAQwGUFNQX0FTDCdGZWRl cmFsIEZpbmFuY2lhbCBTdXBlcnZpc29yeSBBdXRob3JpdHkMCERFLUJBRklOMAgG BgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzCB/gYIKwYBBQUHAQEEgfEwge4w NwYIKwYBBQUHMAGGK2h0dHA6Ly9kLXRydXN0LWNhLTItMS0yMDE4Lm9jc3AuZC10 cnVzdC5uZXQwQgYIKwYBBQUHMAKGNmh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY2dp LWJpbi9ELVRSVVNUX0NBXzItMV8yMDE4LmNydDBvBggrBgEFBQcwAoZjbGRhcDov L2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwQ0ElMjAyLTElMjAy MDE4LE89RC1UcnVzdCUyMEdtYkgsQz1ERT9jQUNlcnRpZmljYXRlP2Jhc2U/MCMG A1UdIAQcMBowCQYHBACL7EABBDANBgsrBgEEAaU0AoEWBDCB8AYDVR0fBIHoMIHl MIHioIHfoIHchmlsZGFwOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJV U1QlMjBDQSUyMDItMSUyMDIwMTgsTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRp ZmljYXRlcmV2b2NhdGlvbmxpc3SGMmh0dHA6Ly9jcmwuZC10cnVzdC5uZXQvY3Js L2QtdHJ1c3RfY2FfMi0xXzIwMTguY3JshjtodHRwOi8vY2RuLmQtdHJ1c3QtY2xv dWRjcmwubmV0L2NybC9kLXRydXN0X2NhXzItMV8yMDE4LmNybDAdBgNVHQ4EFgQU bcTWA4GKBHezJEK0RxetzOy0k00wDgYDVR0PAQH/BAQDAgWgMBYGA1UdEQQPMA2C C3RlYW1iYW5rLmRlMA0GCSqGSIb3DQEBCwUAA4ICAQBuChfnrJ7vVYXSUo2t0E42 hDJmVlkyEaXwoYXSQDuxEZp100r0e4aP9KL+OAXlLU34mhJn/iRHPdeNFYuthVqz uQlWe7npaHCWT+qS6ip6whPqx2QZrkq84QCVkjMj3CmMKEUM8WYYwOsb3IDjlUwH PHiJXdYi5g+w7+4eRML2ZVPggRwCnSvfJ+Gv4AD3ZjOYFgZNn0NtC2qatHDpPHbb gRoYgpEWrATUb1RFbINqMdSQqx4dVPti7DGYXO3gS6HjsHVhV/Xandqu3hx0VsRo K9LWyrD2teenkF4taGpLAlVW+r0HGiP9NWZ3gdFU1BhPTvjoEq/1XLDuTC4ovK1Q t8l6OSAwOxsjpQWoqfgeb3GFLnJjMU/UD+9lco+UpNHqSrYbsdovlNKc1dCT+QAo SAE8SagenB14Gj6KfukVgFGkY/wHxJfWbBESfVWujNU0DQNyDhbO7Z70x5QgNX4y 4P1AoLE0LiGfNYJCywhC7CIsWfInrZkIKkZIV6wMskU3xxYiGiKt9VwJXnns8pDb EY2bAwfG2BklLSAPJKFi+39SX166OSW/UROLgxVshLCoWzsD535DJpTfaDp1pyNq qgWfshNJKPP2B5pa8xD6OFoJM4xELY9nGIAQlarNCJOnv4hfN0FwLbCN5nfx2mcq VpnQEnueeWmog82UVzfVow== -----END CERTIFICATE-----"
									},
									{
										"key": "TPP-Notification-URI",
										"type": "text",
										"value": "http://teambank.we/notificaton"
									},
									{
										"key": "TPP-Notification-Content-Preferred",
										"type": "text",
										"value": "status=LAST,  PROCESS"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": false,\n      \"validUntil\": \"2021-10-10\"\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED - Card accounts",
					"item": [
						{
							"name": "Consent dedicated EMBEDDED 1 SCA method - PAN",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb7219f2-4489-4173-abfe-710539e27a2a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Update ASPSP profile settings set PAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17cdfcbe-aeee-4dd6-8f9d-ee795d767722",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\", \"PAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated PAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5910a7cf-9750-4177-a4ef-5ef1f2cf9dcf",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26d9a47a-3e18-43c5-8361-d9d646140b5c",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"pan\": \"5254127692833241\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"pan\": \"5254127692833241\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"pan\": \"5254127692833241\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76f86de2-36e6-4c16-8349-47617a2f63b9",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92149d85-0b72-4aee-8540-294b1d8279c0",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e56d91c4-ec3b-4cde-aaea-0e1b7fbc7f1d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "060224f7-f359-48e3-8b53-b0a142f3b8c5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Read card accounts list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "500f3d9a-fc89-45e9-af35-b45bc0a772b4",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"resource_id\", jsonData.cardAccounts[0].resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (jsonData.cardAccounts.length > 0) {",
													"        const firstAccount = jsonData.cardAccounts[0];",
													"        ",
													"        pm.expect(firstAccount).to.have.property('_links');",
													"        pm.expect(firstAccount._links).to.have.property('balances');",
													"        pm.expect(firstAccount._links).to.have.property('transactions');",
													"        pm.expect(firstAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e8507bb-e542-4f41-adf1-a795970caa91",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts"
											]
										},
										"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
									},
									"response": []
								},
								{
									"name": "8. Read card account details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c6b050c-40c9-4d62-9b65-16fd6af60101",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData.cardAccount).to.have.property('_links');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('balances');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('transactions');",
													"        pm.expect(jsonData.cardAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}"
											]
										},
										"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
									},
									"response": []
								},
								{
									"name": "9. Read card balances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e088959-36de-4c5a-8a37-4fd0648d6428",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/balances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"balances"
											]
										},
										"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
									},
									"response": []
								},
								{
									"name": "10. Read card transactions list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb8c0df7-aba6-4891-97ea-72feb3c190e4",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"transaction_id\", jsonData.cardTransactions.booked[0].cardTransactionId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"        ",
													"        if (jsonData.cardTransactions !== undefined) {",
													"            const bookingStatus = pm.globals.get(\"booking_status\");",
													"            ",
													"            if (bookingStatus === 'booked') {",
													"                if (jsonData.cardTransactions.pending !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"            ",
													"            if (bookingStatus === 'pending') {",
													"                if (jsonData.cardTransactions.booked !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Links exist\", function () {",
													"    pm.expect(jsonData).to.have.property('cardTransactions');",
													"    pm.expect(jsonData.cardTransactions).to.have.property('_links');",
													"",
													"    pm.expect(jsonData.cardTransactions._links).to.have.property('account');",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7151036-c22e-4f8c-a951-51bebd8f481c",
												"exec": [
													"",
													"var end = new Date();",
													"",
													"",
													"var dd_end = end.getDate();",
													"var mm_end = end.getMonth(); ",
													"var yyyy_end = end.getFullYear() + 1;",
													"if(dd_end<10) ",
													"{",
													"    dd_end='0'+dd_end;",
													"} ",
													"",
													"if(mm_end<10) ",
													"{",
													"    mm_end='0'+mm_end;",
													"} ",
													"//==========================",
													"var start = new Date(end-(3600*24*1000*150));",
													"var dd_start = start.getDate();",
													"var mm_start = start.getMonth(); ",
													"var yyyy_start = start.getFullYear();",
													"if(dd_start<10) ",
													"{",
													"    dd_start='0'+dd_start;",
													"} ",
													"",
													"if(mm_start<10) ",
													"{",
													"    mm_start='0'+mm_start;",
													"} ",
													"",
													"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
													"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
													"",
													"",
													"console.log(\"startFormat : \"+ startFormat);",
													"console.log(\"endFormat : \"+ endFormat);",
													"",
													"pm.globals.set(\"startFormat\", startFormat);",
													"pm.globals.set(\"endFormat\", endFormat);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-09-30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"transactions"
											],
											"query": [
												{
													"key": "bookingStatus",
													"value": "{{booking_status}}"
												},
												{
													"key": "dateFrom",
													"value": "2018-01-01"
												},
												{
													"key": "dateTo",
													"value": "2020-09-30"
												}
											]
										},
										"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca13dc16-138b-4225-8106-5f43e73a733e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "140b1c3e-99eb-49de-8edf-e93891fcc838",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Consent dedicated EMBEDDED 1 SCA method - MASKED_PAN and IBAN",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b332418c-7b02-49cd-adc2-ebfb15305904",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Update ASPSP profile settings set MASKED_PAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "555fec40-6d33-4e42-930f-3cdfb82af810",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\", \"MASKED_PAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated MASKED_PAN and IBAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7aea4757-bef1-4799-a7f7-684ad7efd038",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d7744f-b85e-467d-8910-26e5972d6c68",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "psu-ip-address",
												"type": "text",
												"value": "{{ip_address}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      },\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc346610-3737-4540-aff0-8e79a268c3bd",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f2b324a-9093-485a-96fa-bc916bfc39ac",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5bd6423-3f48-453a-9b74-6b345e72e4fd",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4494212-4334-4a17-afab-e11485b5101c",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Read card accounts list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1ec847d-8934-4710-9a67-c901bcb82a0c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"resource_id\", jsonData.cardAccounts[0].resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (jsonData.cardAccounts.length > 0) {",
													"        const firstAccount = jsonData.cardAccounts[0];",
													"        ",
													"        pm.expect(firstAccount).to.have.property('_links');",
													"        pm.expect(firstAccount._links).to.have.property('balances');",
													"        pm.expect(firstAccount._links).to.have.property('transactions');",
													"        pm.expect(firstAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dec9cc8c-0d59-4b92-a016-29d527a758f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts"
											]
										},
										"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
									},
									"response": []
								},
								{
									"name": "8. Read accounts list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb22f83b-de19-472a-adb0-e38725834834",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (jsonData.accounts.length > 0) {",
													"        const firstAccount = jsonData.accounts[0];",
													"        ",
													"        pm.expect(firstAccount).to.have.property('_links');",
													"        pm.expect(firstAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cb152d49-cdcb-4dfa-b30a-77e41482591c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts"
											],
											"query": [
												{
													"key": "withBalance",
													"value": "true"
												}
											]
										},
										"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
									},
									"response": []
								},
								{
									"name": "9. Read card account details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ba0e408-6cce-40ed-90a6-863737848f4e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData.cardAccount).to.have.property('_links');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('balances');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('transactions');",
													"        pm.expect(jsonData.cardAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}"
											]
										},
										"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
									},
									"response": []
								},
								{
									"name": "10. Read card balances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c94007da-757c-4dde-aad8-e08b532cd4da",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/balances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"balances"
											]
										},
										"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
									},
									"response": []
								},
								{
									"name": "11. Read card transactions list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e3bd78-1f24-4f65-bdd8-1ab96c362cd0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"transaction_id\", jsonData.cardTransactions.booked[0].cardTransactionId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"        ",
													"        if (jsonData.cardTransactions !== undefined) {",
													"            const bookingStatus = pm.globals.get(\"booking_status\");",
													"            ",
													"            if (bookingStatus === 'booked') {",
													"                if (jsonData.cardTransactions.pending !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"            ",
													"            if (bookingStatus === 'pending') {",
													"                if (jsonData.cardTransactions.booked !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Links exist\", function () {",
													"    pm.expect(jsonData).to.have.property('cardTransactions');",
													"    pm.expect(jsonData.cardTransactions).to.have.property('_links');",
													"",
													"    pm.expect(jsonData.cardTransactions._links).to.have.property('account');",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d717c05-7d33-431b-b6de-ca96d9a99847",
												"exec": [
													"",
													"var end = new Date();",
													"",
													"",
													"var dd_end = end.getDate();",
													"var mm_end = end.getMonth(); ",
													"var yyyy_end = end.getFullYear() + 1;",
													"if(dd_end<10) ",
													"{",
													"    dd_end='0'+dd_end;",
													"} ",
													"",
													"if(mm_end<10) ",
													"{",
													"    mm_end='0'+mm_end;",
													"} ",
													"//==========================",
													"var start = new Date(end-(3600*24*1000*150));",
													"var dd_start = start.getDate();",
													"var mm_start = start.getMonth(); ",
													"var yyyy_start = start.getFullYear();",
													"if(dd_start<10) ",
													"{",
													"    dd_start='0'+dd_start;",
													"} ",
													"",
													"if(mm_start<10) ",
													"{",
													"    mm_start='0'+mm_start;",
													"} ",
													"",
													"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
													"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
													"",
													"",
													"console.log(\"startFormat : \"+ startFormat);",
													"console.log(\"endFormat : \"+ endFormat);",
													"",
													"pm.globals.set(\"startFormat\", startFormat);",
													"pm.globals.set(\"endFormat\", endFormat);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-09-30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"transactions"
											],
											"query": [
												{
													"key": "bookingStatus",
													"value": "{{booking_status}}"
												},
												{
													"key": "dateFrom",
													"value": "2018-01-01"
												},
												{
													"key": "dateTo",
													"value": "2020-09-30"
												}
											]
										},
										"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "01969c1a-eee2-4a48-aad3-f9969628e99b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e89ccec6-4b86-4c25-83fd-4d49c94fd1e5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Consent dedicated EMBEDDED 1 SCA method - MASKED_PAN",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22993fc1-d399-4ec5-be5f-e4385c75b03d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Update ASPSP profile settings set MASKED_PAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc6c3940-c676-479b-af9c-3aff8eb65d98",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\", \"MASKED_PAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated MASKED PAN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb81d384-3ccc-4ba8-a00b-c2bc18a071b3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4846b3f2-e9c3-462d-947b-4d07ff1cc30f",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"maskedPan\": \"525412******3241\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2ee9bc5-fa88-4798-a443-914bff1073cc",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5155df6a-375c-48bc-8c60-f0aacfdc05cf",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18ab98c2-fb33-46dd-af84-9995e35350d5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2f26084-cd1f-462a-954d-f5a7be2b705f",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Read card accounts list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23df18ac-fa70-4c75-b8c1-37a0524255d0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"resource_id\", jsonData.cardAccounts[0].resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (jsonData.cardAccounts.length > 0) {",
													"        const firstAccount = jsonData.cardAccounts[0];",
													"        ",
													"        pm.expect(firstAccount).to.have.property('_links');",
													"        pm.expect(firstAccount._links).to.have.property('balances');",
													"        pm.expect(firstAccount._links).to.have.property('transactions');",
													"        pm.expect(firstAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4300e604-faaa-4b31-8f4c-0c4c45a45cbd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts"
											]
										},
										"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
									},
									"response": []
								},
								{
									"name": "8. Read card account details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58561854-bbae-4a4e-bdc1-dba53802fab8",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData.cardAccount).to.have.property('_links');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('balances');",
													"        pm.expect(jsonData.cardAccount._links).to.have.property('transactions');",
													"        pm.expect(jsonData.cardAccount).to.have.property('resourceId');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}"
											]
										},
										"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
									},
									"response": []
								},
								{
									"name": "9. Read card balances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94dc2e05-e30a-4335-b3c5-7c27b76dc9b5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/balances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"balances"
											]
										},
										"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
									},
									"response": []
								},
								{
									"name": "10. Read card transactions list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83308c13-71b5-47fa-b3f5-934c3d493f13",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"transaction_id\", jsonData.cardTransactions.booked[0].cardTransactionId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('cardAccount');",
													"        ",
													"        if (jsonData.cardTransactions !== undefined) {",
													"            const bookingStatus = pm.globals.get(\"booking_status\");",
													"            ",
													"            if (bookingStatus === 'booked') {",
													"                if (jsonData.cardTransactions.pending !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"            ",
													"            if (bookingStatus === 'pending') {",
													"                if (jsonData.cardTransactions.booked !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Links exist\", function () {",
													"    pm.expect(jsonData).to.have.property('cardTransactions');",
													"    pm.expect(jsonData.cardTransactions).to.have.property('_links');",
													"",
													"    pm.expect(jsonData.cardTransactions._links).to.have.property('account');",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc41a997-eb73-4aee-90cf-ad4706720f9c",
												"exec": [
													"",
													"var end = new Date();",
													"",
													"",
													"var dd_end = end.getDate();",
													"var mm_end = end.getMonth(); ",
													"var yyyy_end = end.getFullYear() + 1;",
													"if(dd_end<10) ",
													"{",
													"    dd_end='0'+dd_end;",
													"} ",
													"",
													"if(mm_end<10) ",
													"{",
													"    mm_end='0'+mm_end;",
													"} ",
													"//==========================",
													"var start = new Date(end-(3600*24*1000*150));",
													"var dd_start = start.getDate();",
													"var mm_start = start.getMonth(); ",
													"var yyyy_start = start.getFullYear();",
													"if(dd_start<10) ",
													"{",
													"    dd_start='0'+dd_start;",
													"} ",
													"",
													"if(mm_start<10) ",
													"{",
													"    mm_start='0'+mm_start;",
													"} ",
													"",
													"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
													"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
													"",
													"",
													"console.log(\"startFormat : \"+ startFormat);",
													"console.log(\"endFormat : \"+ endFormat);",
													"",
													"pm.globals.set(\"startFormat\", startFormat);",
													"pm.globals.set(\"endFormat\", endFormat);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/card-accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-09-30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"card-accounts",
												"{{resource_id}}",
												"transactions"
											],
											"query": [
												{
													"key": "bookingStatus",
													"value": "{{booking_status}}"
												},
												{
													"key": "dateFrom",
													"value": "2018-01-01"
												},
												{
													"key": "dateTo",
													"value": "2020-09-30"
												}
											]
										},
										"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "678855fa-926f-46cb-98ad-87598a9a9f1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce39cd2f-3680-473c-9d13-3a1704f34ab3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bank offered",
			"item": [
				{
					"name": "Consent bank offered REDIRECT 1 SCA method",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d88fee-2898-4e0c-ba58-5f377a7c5089",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e018c34-cec2-4986-a37a-807b6c35d6c4",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4c90455-a775-4f00-9ec2-edef5aeb5d2b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "abafe6d0-36da-4951-80d1-8b30c9aa8ca6",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent bank offered REDIRECT->OAUTH 1 SCA method",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "954bd662-1c4d-42cf-874e-82adad076b09",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fd38693-89be-4786-9594-ca6e3243d472",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a79b0e3a-ca74-48b7-9f88-07f2e344e4ab",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"ScaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb3cc8d3-193a-440d-8fc7-07af70d76555",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Dedicated REDIRECT",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a57d2ffa-f1d7-41e2-9744-0a719d43fbd2",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n      \"consentTypes\": {\n        \"bankOfferedConsentSupported\": true,\n        \"globalConsentSupported\": false,\n        \"availableAccountsConsentSupported\": true,\n        \"accountAccessFrequencyPerDay\": 4,\n        \"notConfirmedConsentExpirationTimeMs\": 86400000,\n        \"maxConsentValidityDays\": 0\n      },\n      \"redirectLinkToOnlineBanking\": {\n        \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n      },\n      \"transactionParameters\": {\n        \"availableBookingStatuses\": [\n          \"BOTH\"\n        ],\n        \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n      },\n      \"deltaReportSettings\": {\n        \"entryReferenceFromSupported\": false,\n        \"deltaListSupported\": false\n      },\n      \"scaRequirementsForOneTimeConsents\": {\n        \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n      }\n    },\n    \"pis\": {\n      \"supportedPaymentTypeAndProductMatrix\": {\n        \"payments\": [\n          \"sepa-credit-transfers\",\n          \"instant-sepa-credit-transfers\"\n        ]\n      },\n      \"maxTransactionValidityDays\": 0,\n      \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n      \"paymentCancellationAuthorisationMandated\": false,\n      \"redirectLinkToOnlineBanking\": {\n        \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n        \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n        \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n      },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n      \"piisConsentSupported\": false\n    },\n    \"common\": {\n      \"scaRedirectFlow\": \"REDIRECT\",\n      \"startAuthorisationMode\": \"auto\",\n      \"tppSignatureRequired\": false,\n      \"psuInInitialRequestMandated\": false,\n      \"redirectUrlExpirationTimeMs\": 600000,\n      \"authorisationExpirationTimeMs\": 86400000,\n      \"forceXs2aBaseLinksUrl\": false,\n      \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n      \"supportedAccountReferenceFields\": [\n        \"IBAN\"\n      ],\n      \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n      \"aisPisSessionsSupported\": false,\n      \"signingBasketSupported\": false,\n      \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n      ],\n     \t\"authorisationConfirmationRequestMandated\": false,\n      \"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16e29e05-12e2-4818-b10b-abc29ef6e187",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74b30dc4-1b62-4790-8d95-fe01efdd0d60",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df3f320b-a52c-4c68-871e-a9ceee4bd7ef",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a62ff291-1c8c-43b9-a8fc-c663df8e8eeb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ec73df7-20be-476f-a8f5-1884e5ae0565",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (dedicated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91e36749-dc16-4712-a921-84f033f2894e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n        \"accounts\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "251325cd-a316-49e2-b200-4611044ac78f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66483dd7-4b50-4c6f-95bb-004216f57a3e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "783b1c95-4ec7-4036-9487-441126f1be4c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains accounts, balances and transactions\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd83e860-4047-41b2-8a64-1807514756f3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c523331e-fb80-4288-a47b-65e76c5e806b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f67a77b9-efef-45e4-bccb-aa009e11be00",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e83028aa-4654-46a3-9bad-d0269b659a96",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        if (pm.request.url.query.with_balance !== undefined && pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"            ",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "801bf225-b924-443b-b23a-8e5227c448b2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6f46956-eb1a-4b2b-b10c-879ae2d52cf4",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "13. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11250bbd-616b-45ff-84cd-69ded87b310f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15886f0f-28f9-49e7-b35c-44b2443d4532",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-12-31&withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-12-31"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Dedicated REDIRECT->OAUTH",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf98f02b-236f-4b3d-b073-28730aa59834",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4a4a421-3899-4a5f-a426-53866bb11843",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b38d105-33be-4e32-a0ae-ca28d0bccefe",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaOAuth !== undefined) {",
											"        var a = scaOAuth.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a529b071-403e-4fcb-a9ef-24b3d4f8a30b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9da24b0c-b8c8-4ffa-9d2b-91ec40d55edf",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "070ea470-3dfa-423a-b056-e270a78cf668",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (dedicated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ababe0f-dd97-48e2-a163-87f65d011c9e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n        \"accounts\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"{{iban_single}}\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f5e707a-e57e-4395-87a5-73cbf257c021",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1f06d7d-e6e8-4295-847c-bc5dc7966224",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80a5c9ad-dfa3-4b76-9000-b44a826de222",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains accounts, balances and transactions\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f14a5f74-c3dd-48b0-87ed-74b58946388d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be73f433-665f-42aa-bf8a-f60e6eb41277",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76ed4c35-0690-47f6-ac30-a4a5feef83b7",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8535431e-2d9c-4c96-af50-0af4b65c3e8e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        if (pm.request.url.query.with_balance !== undefined && pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"            ",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49f4afa0-7c0d-462e-a180-18cb46972b28",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d52d098-58ff-4a54-87b5-6491c7160899",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "13. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfe7ce62-0698-419b-9062-01d946495bb9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e932c98-c81f-4b3a-a22e-b65c738437e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-12-31&withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-12-31"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Avaible accounts REDIRECT",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60de93eb-6991-4b85-84e1-e6e660a74e3a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a6d4f55-b7ec-4aec-a1c6-5c4491dacaa9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8b2ac94-141a-4d86-a3fd-499b778a373e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "269e86f8-5c93-4b93-8c06-c685fd1c38d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e6898-0800-45d1-beac-b9d2fd8f39a3",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 100,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7b1358e-548f-450d-ac8c-b2f7540b9c53",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43ca57e7-4094-4843-a627-d54f192c6dbe",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (availableAccounts)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfb9d249-e61b-44c4-aa57-fc7e5cf6adf8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccounts\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5ba24d3-8cbb-419f-be65-506cc1108c6c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce3803e7-c998-4b2f-a65b-4305d853f34b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c83062f3-e656-45e7-9cad-55d75be2dcd4",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.availableAccounts).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"ALL_AVAILABLE_ACCOUNTS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb679781-7945-4bd5-8750-803f2c939c82",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3bb27b1-46cd-4f19-90e8-c9780b93d98d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95005182-6239-4564-92a4-5d7015e4b943",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6c92614-38bf-42ce-9ca6-29d7c514b4cc",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52f4ff01-e44a-4668-8a8a-1746739223d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List (withBalance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2580397f-f777-46a1-8c5b-f596d16a1192",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ac3eaa3-721b-478c-820e-00bbaaa44334",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce393e1f-1000-47eb-932a-39342d239c7f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Avaible accounts REDIRECT->OAUTH",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63d346c4-4401-4b41-ad9a-f48c0b57633a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ee2f571-2010-496a-bcde-c5f5d7db2ec4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74d3eb12-47e1-446a-8e81-206edd05fe9f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150d0f70-99df-4068-9fb5-8e68ba9c8326",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaOAuth !== undefined) {",
											"        var a = scaOAuth.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60226c56-aabd-4921-bf11-68668c93b2ec",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 100,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bd67965-1eb4-43d3-b16d-b94b4424b874",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97f21ba9-085f-416f-8c9d-67fa53345d27",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (availableAccounts)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3ea5d42-97d6-4a66-912e-b461f813a7a4",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccounts\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5923e806-8655-4dd3-b9f4-6b7739e488fa",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac58ca6e-a17e-4978-bdfb-b86209106c2a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61d29f8a-72fe-42b3-8fa4-add5e2ca508f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.availableAccounts).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"ALL_AVAILABLE_ACCOUNTS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b86f7d96-fbd3-4490-b08d-54ef396ccb51",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d2335c9-9ca8-4ef4-8eab-812ceb055a79",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09eafffa-32b3-409d-8593-30d4f0ffb0bb",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "892be176-712b-43c0-a2bd-16240c8c44b9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22a75f8b-701a-40f6-b1be-5e7c262fc821",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List (withBalance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfd6b9af-62de-4dd0-bcba-be00e4c04b78",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6368f2f-ac99-4030-b5cf-002661e5007f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0c7dddd-0f4a-4b21-bf69-892089f8b874",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Avaible accounts with Balances REDIRECT",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25d9696-c504-4cbe-b0e1-383fb95de0a0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae5f157f-0871-41ce-a777-4bba6dd6b186",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5902ee8-4e7c-4209-a3a0-38f454a567ca",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a8be956-ae44-4bd2-a757-15dc70c17cdd",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a791356-0d0b-4737-8b9c-87bb471c23d7",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 100,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17ce2dab-e8bd-4b20-bdf4-53e27415e1a9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9e5a1c4-ece6-4c3e-a0ec-9a02dd63d7da",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (availableAccountsWithBalance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bd5f587-e965-4713-935e-94fbd6697790",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccountsWithBalance\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aff2e56e-3f95-4b81-bc99-fb726b57ebac",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea14eafc-ec60-43aa-9a5a-434b187aba3e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "240287cf-d23b-4919-9cea-4d6fe339ee40",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.availableAccountsWithBalance).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"ALL_AVAILABLE_ACCOUNTS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02b3589a-d884-4f16-82c1-7ad019876d27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b5a5820-0392-422f-a2ff-0056cc82c0a7",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8569117c-47fe-4a05-a72b-066a4945056d",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e02afae8-61c2-4125-9279-7fa2e255abd8",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13817e3c-d04e-4f7d-98eb-36b659c87529",
										"exec": [
											"pm.globals.unset(\"account_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}",
											"disabled": true
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List (with balance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "565b2af0-d320-4ee2-90a6-82d1b5cc2330",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"         pm.expect(firstAccount).to.have.property('balances');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33d0b2ef-8a80-4432-bf9d-a013e4dc1c11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a027ddb8-bfea-41e6-8fe3-1d366fb5463c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Avaible accounts with Balances REDIRECT->OAUTH",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ad1f814-5791-461a-98db-62aa21c870d6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e24edce-1a5d-49f0-bafc-c667b348986c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "526c4f1d-124d-44a4-a4ab-497bafdc785d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8665dbd8-5af4-4354-ae88-ca9b02c2fc38",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaOAuth !== undefined) {",
											"        var a = scaOAuth.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7403a184-5095-4206-8f54-365ed9fd5fed",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 100,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d395270-6fe9-4d19-8e34-8a69af2079f5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4f439fe-4bc0-4232-9813-ae6f71dc9440",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (availableAccountsWithBalance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "978c3170-6b61-4c49-88bc-5044d7777ee3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccountsWithBalance\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d8a3a19-8e61-4e16-b0ba-c8268e1de093",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2678b10e-6df4-4841-8fca-b7af17a8847a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2aec9df-31ee-43f5-90a7-f6ff7b2315cf",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.availableAccountsWithBalance).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"ALL_AVAILABLE_ACCOUNTS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b2dd5a6-8826-44ef-89c4-42eb62aeaf10",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "261dc0dd-06a7-4827-b38b-381b9b7f9576",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5e902fd6-8af3-48fe-8c43-8e48fc436930",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2350c4-0772-4476-8f90-224bde88cf3f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2cca5fc-2664-425a-b64f-1c9b734cb93a",
										"exec": [
											"pm.globals.unset(\"account_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}",
											"disabled": true
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Account List (with balance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fba7c80-c763-4f1a-9649-2a364a53b616",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount._links).to.eql(undefined);",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"         pm.expect(firstAccount).to.have.property('balances');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ac5ea2b-f937-4475-8d77-ea95f8e11e61",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "13. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7dbdf1b-aa57-4886-bca7-12a17037d07a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"CONSENT_INVALID\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.tppMessages[0].code).to.eql('CONSENT_INVALID');",
											"    }});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Global REDIRECT",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cd930c4-0d4e-4406-b33d-48728c94fab1",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986e2e08-5098-4265-b45c-4da995c69f61",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95aaee5b-1247-4166-ad23-95022dd4e53c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27c15065-c22d-4b05-af07-c37bc663e70b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3407b54-4711-418a-a64c-55e0a555512c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38365d54-2fb1-4fa0-bbfd-2b103ab7f5df",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (global)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0be6f033-6555-4077-800a-d32e43bb7a84",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n\t\t\"allPsd2\" : \"allAccounts\"\n    },\n    \"frequencyPerDay\": 99,\n    \"validUntil\": \"2020-12-31\",\n    \"combinedServiceIndicator\": true,\n    \"recurringIndicator\": true\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79c2f8cb-e0fc-4bce-831f-591919c609b0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a158408f-7db4-4c3b-adcc-d085751193f7",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b201c90-e00e-491b-9a5f-7ab6d563e35e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.allPsd2).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"GLOBAL\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef0fcda7-4eba-4026-b028-cc289130ce57",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43746cca-1041-4190-b3f1-ec57548d2780",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2cb0908-2a2c-4d77-9d73-aa6bced5029d",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26bed857-64a3-427b-8aba-5fa61dc7ea50",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        if (pm.request.url.query.with_balance !== undefined && pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95052d07-bd8c-4b42-81a1-abf1680aa448",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a8f55c7-8656-4f82-96da-f5a0c729d89a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered -> Global REDIRECT->OAUTH",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34e16635-d026-452a-a418-30a874792cfb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": true,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de3a3836-2173-4e50-8af0-ebed1d0fcf54",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "492392f7-a762-4b12-82c9-f91c4cc09185",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaOAuth = _links.scaOAuth.href;",
											"",
											"    if (scaOAuth === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaOAuth !== undefined) {",
											"        var a = scaOAuth.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e19cccf5-5f97-44e7-a6ff-ccd8080099ee",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22061341-16b5-4990-b42e-3d6ff1f607fc",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33252ca5-d134-4a83-8b3c-9538665ee20a",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Save access (global)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8bc1856-05ec-4eba-9d4e-e4095efff752",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n\t\t\"allPsd2\" : \"allAccounts\"\n    },\n    \"frequencyPerDay\": 99,\n    \"validUntil\": \"2020-12-31\",\n    \"combinedServiceIndicator\": true,\n    \"recurringIndicator\": true\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6563ee2-6ed0-4916-b8c5-89cb19d2907b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2076c589-afa4-42e6-8b52-13cf8f018d51",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from CMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf4ba328-5872-4fc2-818f-b3fc19587f38",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('access');",
											"    pm.expect(jsonData).to.have.property('recurringIndicator');",
											"    pm.expect(jsonData).to.have.property('validUntil');",
											"    pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"    pm.expect(jsonData).to.have.property('lastActionDate');",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData).to.have.property('withBalance');",
											"    pm.expect(jsonData).to.have.property('tppRedirectPreferred');",
											"    pm.expect(jsonData).to.have.property('aisConsentRequestType');",
											"    pm.expect(jsonData).to.have.property('psuIdDataList');",
											"    pm.expect(jsonData).to.have.property('tppInfo');",
											"    pm.expect(jsonData).to.have.property('authorisationTemplate');",
											"    pm.expect(jsonData).to.have.property('multilevelScaRequired');",
											"    pm.expect(jsonData).to.have.property('accountConsentAuthorizations');",
											"    pm.expect(jsonData).to.have.property('usageCounterMap');",
											"    pm.expect(jsonData).to.have.property('creationTimestamp');",
											"    pm.expect(jsonData).to.have.property('statusChangeTimestamp');",
											"});",
											"",
											"pm.test(\"Consent status is Valid\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											"",
											"pm.test(\"Access contains availableAccounts\", () => {",
											"    const access = jsonData.access;",
											"    pm.expect(access).to.have.property(\"accounts\");",
											"    pm.expect(access).to.have.property(\"balances\");",
											"    pm.expect(access).to.have.property(\"transactions\");",
											"    pm.expect(access.allPsd2).to.eql(\"ALL_ACCOUNTS\");",
											"});",
											"",
											"pm.test(\"Check AIS Consent Request Type\", () => {",
											"    pm.expect(jsonData.aisConsentRequestType).to.eql(\"GLOBAL\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90bfb40a-6a46-43eb-8baa-cc5849639e53",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_single}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5330e6f7-ac1e-4995-8396-7bc750e9365d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a6439c2-9fbe-406b-b4d5-ab37b7ac11b2",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c32d4544-eff7-416d-8f0f-f8239d45c1e9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"        if (pm.request.url.query.with_balance !== undefined && pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(firstAccount).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d344d3-2272-4a95-ab48-3d7f290607e2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "12. Read Balance List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ddec390-c5c7-4c1b-b63a-ff39f0a6b185",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Global",
			"item": [
				{
					"name": "Consent global EMBEDDED Implicit 1 SCA method",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fab9f299-481f-46b4-b4ba-f14fa8edba1d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a90de21-6df1-44ee-ad95-b760e72d3e36",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e9ebcce-fb35-4034-a44f-029a8f07246c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"Start updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"     ",
											"    const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6ef7b3b-c3b0-4e6e-838f-bd7c4bffc12b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de57e3ac-36c3-4bff-a1e4-44edc2968acd",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents finalization global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1827183-a9d9-4da2-9c0e-d442bb8a8d13",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f026b62-fb91-4e21-a594-3c8ce5860884",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "7. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "004cf830-fa88-4b83-a08c-4ec70f2243e1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "8. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43d67925-af22-4137-85f3-eea802fe41a6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "14. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3567def-4db0-4ac6-a132-b04fb6319d55",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"resource_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"        ",
											"//",
											"// This test fails and is blocked by the https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/987 issue.",
											"//",
											"",
											"        ",
											"//        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"//           pm.expect(firstAccount).to.have.property('balances');",
											"//        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97a8f423-3707-4075-9f8f-79790de700c8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "15. Read Account Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "866649de-90f3-413e-b39f-5a6ff07c2a9a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData.account).to.have.property('_links');",
											"        pm.expect(jsonData.account._links).to.have.property('balances');",
											"        pm.expect(jsonData.account._links).to.have.property('transactions');",
											"        pm.expect(jsonData.account).to.have.property('resourceId');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData.account).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
							},
							"response": []
						},
						{
							"name": "16. Read Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8faf5fec-d8eb-4de5-99b8-a76e618ea5d3",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/balances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"balances"
									]
								},
								"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
							},
							"response": []
						},
						{
							"name": "17. Read Transaction List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842dff3f-f5d3-4928-bc18-4306ac625a8e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"transaction_id\", jsonData.transactions.booked[0].transactionId);",
											"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('account');",
											"        ",
											"        if (jsonData.transactions !== undefined) {",
											"            const bookingStatus = pm.globals.get(\"booking_status\");",
											"            ",
											"            if (bookingStatus === 'booked') {",
											"                if (jsonData.transactions.pending !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"            ",
											"            if (bookingStatus === 'pending') {",
											"                if (jsonData.transactions.booked !== undefined) {",
											"                    pm.expect().fail();",
											"                } ",
											"            }",
											"        }",
											"        ",
											"        if (pm.globals.get(\"with_balance\") === \"true\") {",
											"            pm.expect(jsonData).to.have.property('balances');",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Links exist\", function () {",
											"    pm.expect(jsonData).to.have.property('transactions');",
											"    pm.expect(jsonData.transactions).to.have.property('_links');",
											"",
											"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
											"    pm.expect(jsonData.transactions._links).to.have.property('account');",
											"    pm.expect(jsonData._links).to.have.property('download');",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ebf2dd9-9714-4df3-b3f6-3949510a57dc",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth(); ",
											"var yyyy_end = end.getFullYear() + 1;",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000*150));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth(); ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions?bookingStatus={{booking_status}}&withBalance={{with_balance}}&dateFrom=2018-01-01&dateTo=2020-09-30",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "{{booking_status}}"
										},
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										},
										{
											"key": "dateFrom",
											"value": "2018-01-01"
										},
										{
											"key": "dateTo",
											"value": "2020-09-30"
										}
									]
								},
								"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
							},
							"response": []
						},
						{
							"name": "19 Read Transaction Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c31b0686-76b7-4bbe-b46d-b03c27f05380",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Links exists\", () => {",
											"    if (!(jsonData === null || jsonData.length === 0)) {",
											"        pm.expect(jsonData).to.have.property('transactionsDetails');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionAmount');",
											"        pm.expect(jsonData.transactionsDetails).to.have.property('transactionId');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{resource_id}}/transactions/{{transaction_id}}?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts",
										"{{resource_id}}",
										"transactions",
										"{{transaction_id}}"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
							},
							"response": []
						},
						{
							"name": "9. Delete Consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1d5199a-67c3-4eab-9e41-6a5c7ac5f7cd",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7949befb-92d6-45a7-ab57-4d6a7c1c9ffd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59797649-1ebe-425a-944c-2f6c50f2f162",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent global REDIRECT->OAUTH Implicit 1 SCA method",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ed9009c-5923-4483-b754-30d54aae4d24",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent and enable OAUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c4cf9d5-18ff-4b49-ac10-8a46d74f411c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.  Create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5faa8363-23aa-4ade-af84-addd70b50359",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData._links.scaStatus.href.split('/');",
											"const authorisationId = parts.pop();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de413f27-c055-49b3-8002-1cf4c5ea9c65",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e411964b-c84f-4cb1-909a-768ad2f79342",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f418b4ef-10eb-4213-b84f-4ab0338e8fe4",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create authorisation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb8986f5-21f0-4460-8e7b-b273730e4d3f",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData.redirectUri.split(\"=\");",
											"const authorisationCode = parts[1];",
											"pm.globals.set(\"authorisation_code\", authorisationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/authorise?login={{psu_id_single}}&pin={{psu_id_password}}&redirect_uri=random",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"authorise"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "redirect_uri",
											"value": "random"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2051404d-2749-4a5d-a739-af2ae4e70f89",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"bearer\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/token?grant_type=AUTHORISATION_CODE&code={{authorisation_code}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "AUTHORISATION_CODE"
										},
										{
											"key": "code",
											"value": "{{authorisation_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03c07813-a64b-4872-bbc3-5e2a02210cbd",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [],\n    \t\"balances\": [],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\",\n    \t\"transactions\": []\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87a0fbde-fc7c-4b9b-899c-c8956d6af755",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe6d40c3-c663-4cd3-909f-d00e249827f4",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4a53546-245e-4a5e-a9a3-e2dee9d86bb6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1e7c983-1e42-45d0-8a65-dcdbda7de1e7",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cadfd8a0-76f5-42bf-913e-3d48a7284a2b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "13. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed73c9da-41a6-4758-a5cd-2e2550d2b8a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "14. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f634055-4d06-407e-be58-0471de7533ca",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "15. Delete Consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d7d9701-1578-4aab-b3bb-69330f17236e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f96de6cc-ffa8-4ace-bc53-17f153626e95",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f76b540-8d48-4ff2-a7ba-76841534a070",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent global EMBEDDED Explicit 1 SCA method",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2523d71c-9aaa-4912-8f22-98cc16c07a2c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent and signing basket support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fa5084f-e64a-4f0e-bbc4-dff41bf46aa9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.  Create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7d918d5-08f2-49a9-9d0c-f5fd99c0d3df",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"Start startAuthorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"     pm.expect(_links).to.have.property('startAuthorisation');",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b316fbac-6104-4fc3-a124-652d6a1bcc34",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90c4a1f5-fe8f-40cb-ac76-9b1ade011739",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04b2b93a-e3e6-4325-a1b1-d19a2addbb89",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7884258a-544b-455d-a132-3091fab855be",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0d90166-fded-4501-9126-f8e470002b51",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f41a2b04-326a-4f79-85f7-9910c2a9cda0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "8. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60f4b0b9-aeb4-43f7-b423-fe52d8982db5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "9. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c58acb5-30f1-4f92-957a-948eac530c08",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "10. Delete Consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "277bb724-1d44-42ff-9b45-96d49672a53b",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17dd4cd4-ff60-438f-a82a-c358877f4df3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "085d8ad1-e3cd-4207-a9fd-d910755ab1dc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent global REDIRECT->OAUTH Explicit 1 SCA method",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56333907-4d8a-4b62-babf-da7b6c1d792b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent and signing basket support in ASPSP profile and enable OAUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e4a8284-ad4a-4f6e-b31c-11328ae9aa30",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.  Create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9041b69c-68f5-4046-ad60-76dbdb045b60",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"Start startAuthorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"     pm.expect(_links).to.have.property('startAuthorisation');",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "438fd5f9-637b-4d2b-9d0a-f470449d3fde",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26f9dc1a-0017-4b2c-915e-0a223be06461",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"ScaOAuth link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('scaOAuth');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c30ce1a-06e2-44ce-8ecd-f342af2922fa",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d89a019-e5a0-4e32-842e-835ce122252a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52389182-2b93-4514-b96d-6a3c4865fe92",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create authorisation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e63fd332-454d-422b-a432-0c18dfbfe327",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData.redirectUri.split(\"=\");",
											"const authorisationCode = parts[1];",
											"pm.globals.set(\"authorisation_code\", authorisationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/authorise?login={{psu_id_single}}&pin={{psu_id_password}}&redirect_uri=random",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"authorise"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "redirect_uri",
											"value": "random"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e63d1d4-be34-4783-9b71-7d0cd1fd7a98",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"bearer\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/token?grant_type=AUTHORISATION_CODE&code={{authorisation_code}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "AUTHORISATION_CODE"
										},
										{
											"key": "code",
											"value": "{{authorisation_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "457af164-6264-461c-b8a4-fa94268d82b9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [],\n    \t\"balances\": [],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\",\n    \t\"transactions\": []\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44cf4d18-c1be-464d-8f56-62127498a562",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f496ea96-c4c7-4462-8962-9ed512d35e7f",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03862b32-68cf-44df-89d8-81e11f5d0f16",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c07ffcb-bd96-4520-8b14-d6b54a01433e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d74aa6a-90d0-42cb-8a69-beaea23b46bd",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "13. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49cef127-5377-4ca8-836b-e39ced17b039",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "14. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b914462a-164b-482e-8f16-d16b4fcd8554",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "15. Delete Consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc4f1fac-c142-468d-a0a1-3cb52741cb65",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ce2eaf1-70c4-4954-a4a1-5f254a93943b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b3c5201-7c20-4fca-b1e3-ad0c39ffd9a1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "One-off consent global EMBEDDED Implicit",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e0f79e9-f7fc-489f-8a31-4e04571558bb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent and disable SCA for one time consent in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2c5014f-ecef-44a5-98c8-9f230a8f8daf",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": false\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.  Create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "589e0186-213e-4a34-9cf9-c3233b05e072",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92cd3406-1a2a-483f-962c-697a3450daba",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 1,\n  \"recurringIndicator\": false,\n  \"validUntil\": \"2021-10-10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Update PSU Data for consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e1aa34f-0f69-42d7-88b7-57e08b81f830",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "628a63d1-8c1b-416a-aa9d-e229c3e9010e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5ad36e1-44be-4d17-a6da-6ab093edf372",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f452f10-6c64-41c5-a61d-c017021a85da",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4daad18-fe52-49e7-b7ce-712768780794",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "748a020f-004e-4b85-afdc-e6e1bed384f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "One-off consent global REDIRECT->OAUTH Implicit",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb806923-2670-4d45-aeaf-fa1b8880e9f0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable global consent and disable SCA for one time consent and enable OAUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7ac08c9-4629-47bb-b276-c9c93ca872bc",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": true,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOTH\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": false\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"http://localhost:4200/idp/\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.  Create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63e693d4-fcda-484e-9e1e-a5cb6481ed68",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const parts = jsonData._links.scaStatus.href.split('/')",
											"const authorisationId = parts.pop();",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											"pm.globals.set(\"redirect_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfe74f08-f66e-40d0-8686-fc92950348e6",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 1,\n  \"recurringIndicator\": false,\n  \"validUntil\": \"2021-10-10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e99027-fd74-4c01-8835-9232a994612f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55a6a753-0969-43c4-8a45-b1ca40e72f23",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create authorisation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e5d82a5-3052-4dd1-8242-74aba75f8470",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const parts = jsonData.redirectUri.split(\"=\");",
											"const authorisationCode = parts[1];",
											"pm.globals.set(\"authorisation_code\", authorisationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/authorise?login={{psu_id_single}}&pin={{psu_id_password}}&redirect_uri=random",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"authorise"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "redirect_uri",
											"value": "random"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b9beac6-f7fa-4610-aa62-2a018cbbf4f2",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"bearer\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/oauth/token?grant_type=AUTHORISATION_CODE&code={{authorisation_code}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "AUTHORISATION_CODE"
										},
										{
											"key": "code",
											"value": "{{authorisation_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1c07ee-cecb-417b-9540-a8d10621b26d",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"ledgersBearerToken\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 4,\n\t\"access\": {\n    \t\"accounts\": [],\n    \t\"balances\": [],\n    \t\"availableAccounts\": \"ALL_ACCOUNTS\",\n    \t\"transactions\": []\n\t},\n\t\"validUntil\": \"2021-10-10\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04e651d9-60a1-43ef-ab5f-a24685fde679",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb2a0612-41aa-46bf-a43c-721bdd786e80",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update a status of AIS consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc72b86f-1d51-4265-8890-ac162464317a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Confirm AIS consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa7ae4b5-7e94-4126-b98c-bbba76bfc338",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f240560-6114-4836-b608-c8782642f1e3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6. Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986cce6c-efc9-4d92-be52-faa70d2daada",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7. Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b53fb41-b270-4234-8133-8a80bbb15b7f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "test data",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55847c35-26d5-4288-99d0-710ef4d78649",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be16c3fe-f75f-4ef8-bb86-ef1db328b543",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "One-off consent EMBEDDED 1 SCA method",
			"item": [
				{
					"name": "1. Update ASPSP profile settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9fbcf4e-ce42-493e-a7ea-1ca5cb69af18",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"aspsp-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Set embedded SCA approach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f23a569-ff25-40f6-a31c-0301509813d8",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"sca-approaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create one-off consent dedicated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cee28ab1-c228-4fe1-9f6c-96d1c34a958a",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Consent Id exists\", () => {",
									"   pm.expect(jsonData).to.have.property('consentId');",
									"});",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Update PSU authentication link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
									"",
									"    if (updatePsuAuthentication === undefined) {",
									"       pm.expect().fail();",
									"    }",
									"});",
									"",
									"pm.test(\"Consent status is received\", () => {",
									"    pm.expect(jsonData.consentStatus).to.eql('received');",
									"});",
									"",
									"pm.globals.set(\"consent_id\", jsonData.consentId);",
									"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9c0566b-4d6f-4b8b-9644-235ee7ec8bf6",
								"exec": [
									"pm.globals.unset(\"consent_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_single}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "psu-ip-address",
								"value": "{{ip_address}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 1,\n  \"recurringIndicator\": false,\n  \"validUntil\": \"2021-10-10\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Start the authorisation process for a consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dab9ee8-742f-43e2-a6b4-bd784109f94b",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"updatePsuAuthentication link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
									"});",
									"",
									"pm.test(\"Select scaStatus \", () => {",
									"    pm.expect(jsonData).to.have.property('scaStatus');",
									"    const scaStatus = jsonData.scaStatus;",
									"    pm.expect(scaStatus).to.eql('psuIdentified');",
									"});",
									"",
									"pm.globals.set(\"authorisation_id\", authorisationId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c43d77ec-7886-4ecb-a42f-e6629491fbe7",
								"exec": [
									"pm.globals.unset(\"authorisation_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_single}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations"
							]
						},
						"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
					},
					"response": []
				},
				{
					"name": "5. Update PSU Data for consents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b59f469-4674-41bb-b03a-e79c8171679b",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is scaMethodSelected', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
									"});",
									"",
									"pm.test(\"Select authoriseTransaction method link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('authoriseTransaction');",
									"});",
									"",
									"pm.test(\"Select chosenScaMethod exist\", () => {",
									"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
									"    const chosenScaMethod = jsonData.chosenScaMethod;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
									"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
									"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
									"});",
									"",
									"pm.test(\"Challenge data exist\", () => {",
									"    pm.expect(jsonData).to.have.property('challengeData');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_single}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "6. Update PSU Data for consents finalization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6757fbd-41cd-4962-9825-cd422c6a6f75",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is finalised', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
									"});",
									"",
									"pm.test(\"Select scaStatus link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_single}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "7. Read Account List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a55df0af-97d0-4d58-a176-5ab43f645621",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.globals.set(\"account_id_current\", jsonData.accounts[0].resourceId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data exists\", () => {",
									"    if (jsonData.accounts.length > 0) {",
									"        const firstAccount = jsonData.accounts[0];",
									"        ",
									"        pm.expect(firstAccount).to.have.property('_links');",
									"        pm.expect(firstAccount._links).to.have.property('balances');",
									"        pm.expect(firstAccount._links).to.have.property('transactions');",
									"        pm.expect(firstAccount).to.have.property('resourceId');",
									"",
									"        // This test fails and is blocked by the https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/987 issue.\"",
									"        // if (pm.globals.get(\"with_balance\") === \"true\") {",
									"            // pm.expect(firstAccount).to.have.property('balances');",
									"        // }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c2ab55f5-7ba9-4dd7-add0-af5f21c3e159",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								}
							]
						},
						"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
					},
					"response": []
				},
				{
					"name": "8. Read Account Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7892236f-66f7-47d9-a2af-743f75f95b81",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.globals.set(\"account_id\", jsonData.resourceId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data exists\", () => {",
									"    if (!(jsonData === null || jsonData.length === 0)) {",
									"        pm.expect(jsonData.account).to.have.property('_links');",
									"        pm.expect(jsonData.account._links).to.have.property('balances');",
									"        pm.expect(jsonData.account).to.have.property('resourceId');",
									"        ",
									"        // This test fails and is blocked by the https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/987 issue.\"",
									"        // if (pm.globals.get(\"with_balance\") === \"true\") {",
									"            // pm.expect(jsonData.account).to.have.property('balances');",
									"        // }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}?withBalance={{with_balance}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								}
							]
						},
						"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
					},
					"response": []
				},
				{
					"name": "9. Read Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39213b01-5309-412f-a26d-a67a7925b5ba",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data exists\", () => {",
									"    if (!(jsonData === null || jsonData.length === 0)) {",
									"        pm.expect(jsonData).to.have.property('account');",
									"        ",
									"        if (pm.globals.get(\"with_balance\") === \"true\") {",
									"            pm.expect(jsonData).to.have.property('balances');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/balances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"balances"
							]
						},
						"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
					},
					"response": []
				},
				{
					"name": "10. Read Transaction List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07b84192-a977-4541-8389-2c02cf3ec090",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
									"pm.globals.set(\"dowload_link\", jsonData._links.download.href);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data exists\", () => {",
									"    if (!(jsonData === null || jsonData.length === 0)) {",
									"        pm.expect(jsonData).to.have.property('account');",
									"        ",
									"        if (jsonData.transactions !== undefined) {",
									"            const bookingStatus = pm.globals.get(\"booking_status\");",
									"            ",
									"            if (bookingStatus === 'booked') {",
									"                if (jsonData.transactions.pending !== undefined) {",
									"                    pm.expect().fail();",
									"                } ",
									"            }",
									"            ",
									"            if (bookingStatus === 'pending') {",
									"                if (jsonData.transactions.booked !== undefined) {",
									"                    pm.expect().fail();",
									"                } ",
									"            }",
									"        }",
									"        ",
									"        if (pm.globals.get(\"with_balance\") === \"true\") {",
									"            pm.expect(jsonData).to.have.property('balances');",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Links exist\", function () {",
									"    pm.expect(jsonData).to.have.property('transactions');",
									"    pm.expect(jsonData.transactions).to.have.property('_links');",
									"",
									"    pm.expect(jsonData.transactions._links).to.have.property('balances');",
									"    pm.expect(jsonData.transactions._links).to.have.property('account');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b58b62f-175e-4bcb-b461-77deb5e1aeee",
								"exec": [
									"pm.globals.unset(\"resource_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/transactions?withBalance={{with_balance}}&bookingStatus={{booking_status}}&&dateTo=2020-12-31&dateFrom=2019-01-01",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"transactions"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								},
								{
									"key": "bookingStatus",
									"value": "{{booking_status}}"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "dateTo",
									"value": "2020-12-31"
								},
								{
									"key": "dateFrom",
									"value": "2019-01-01"
								}
							]
						},
						"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
					},
					"response": []
				},
				{
					"name": "11. Download transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{dowload_link}}",
							"host": [
								"{{dowload_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Read Transaction Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bb4d643-8011-4900-af47-b7612be37d75",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/transactions/{{resource_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"transactions",
								"{{resource_id}}"
							]
						},
						"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
					},
					"response": []
				},
				{
					"name": "13. Read Transaction Details Exceeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3f8f433-b870-4fb7-9ee3-8b314664d78d",
								"exec": [
									"pm.test(\"Status code is 429\", () => {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Error code is ACCESS_EXCEEDED\", () => {",
									"    const jsonData = pm.response.json();",
									"    const error = jsonData.tppMessages[0];",
									"    pm.expect(error.code).to.eql('ACCESS_EXCEEDED');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/transactions/{{resource_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"transactions",
								"{{resource_id}}"
							]
						},
						"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
					},
					"response": []
				},
				{
					"name": "14. Read Transaction List Exceeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a6572d-652b-464e-891a-cf6aea480236",
								"exec": [
									"pm.test(\"Status code is 429\", () => {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Error code is ACCESS_EXCEEDED\", () => {",
									"    const jsonData = pm.response.json();",
									"    const error = jsonData.tppMessages[0];",
									"    pm.expect(error.code).to.eql('ACCESS_EXCEEDED');",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45df79c1-bf9a-4750-88c1-aea2d179d256",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/transactions?dateFrom=2018-01-01&dateTo=2019-12-31&withBalance={{with_balance}}&bookingStatus={{booking_status}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "2018-01-01"
								},
								{
									"key": "dateTo",
									"value": "2019-12-31"
								},
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								},
								{
									"key": "bookingStatus",
									"value": "{{booking_status}}"
								}
							]
						},
						"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
					},
					"response": []
				},
				{
					"name": "15. Read Balance Exceeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c8369e6-af62-4f35-9e1c-d7c5eb49f76e",
								"exec": [
									"pm.test(\"Status code is 429\", () => {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Error code is ACCESS_EXCEEDED\", () => {",
									"    const jsonData = pm.response.json();",
									"    const error = jsonData.tppMessages[0];",
									"    pm.expect(error.code).to.eql('ACCESS_EXCEEDED');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}/balances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}",
								"balances"
							]
						},
						"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
					},
					"response": []
				},
				{
					"name": "16. Read Account Details Exceeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78d8c752-c343-4f24-8dbe-4ed25798b7e6",
								"exec": [
									"pm.test(\"Status code is 429\", () => {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Error code is ACCESS_EXCEEDED\", () => {",
									"    const jsonData = pm.response.json();",
									"    const error = jsonData.tppMessages[0];",
									"    pm.expect(error.code).to.eql('ACCESS_EXCEEDED');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_current}}?withBalance={{with_balance}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account_id_current}}"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								}
							]
						},
						"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
					},
					"response": []
				},
				{
					"name": "17. Read Account List Exceeded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f04d1cb-4d07-4419-8b1f-752243351fed",
								"exec": [
									"pm.test(\"Status code is 429\", () => {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Error code is ACCESS_EXCEEDED\", () => {",
									"    const jsonData = pm.response.json();",
									"    const error = jsonData.tppMessages[0];",
									"    pm.expect(error.code).to.eql('ACCESS_EXCEEDED');",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c89f337-176f-4f65-9495-08f53f588fb4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Consent-ID",
								"value": "{{consent_id}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "{{with_balance}}"
								}
							]
						},
						"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1ef5c2ae-bb24-4e15-a7f0-d9bbaec0f23f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe38aca6-97e0-4c95-a1d2-7e67aae6c036",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}